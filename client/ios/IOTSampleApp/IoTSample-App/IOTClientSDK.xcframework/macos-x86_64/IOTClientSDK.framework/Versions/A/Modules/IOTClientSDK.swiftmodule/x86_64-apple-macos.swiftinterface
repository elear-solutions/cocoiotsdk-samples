// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-macos10.15 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name IOTClientSDK
import Foundation
@_exported import IOTClientSDK
import Swift
import os.log
import os
public enum DataType : Swift.Int32, Swift.Hashable, Swift.Codable {
  case COCO_STD_DATA_TYPE_MIN
  case COCO_STD_DATA_TYPE_BOOLEAN
  case COCO_STD_DATA_TYPE_BOOLEAN_ARR
  case COCO_STD_DATA_TYPE_STRING
  case COCO_STD_DATA_TYPE_STRING_ARR
  case COCO_STD_DATA_TYPE_UINT8
  case COCO_STD_DATA_TYPE_UINT8_ARR
  case COCO_STD_DATA_TYPE_UINT16
  case COCO_STD_DATA_TYPE_UINT16_ARR
  case COCO_STD_DATA_TYPE_UINT32
  case COCO_STD_DATA_TYPE_UINT32_ARR
  case COCO_STD_DATA_TYPE_UINT64
  case COCO_STD_DATA_TYPE_UINT64_ARR
  case COCO_STD_DATA_TYPE_INT8
  case COCO_STD_DATA_TYPE_INT8_ARR
  case COCO_STD_DATA_TYPE_INT16
  case COCO_STD_DATA_TYPE_INT16_ARR
  case COCO_STD_DATA_TYPE_INT32
  case COCO_STD_DATA_TYPE_INT32_ARR
  case COCO_STD_DATA_TYPE_INT64
  case COCO_STD_DATA_TYPE_INT64_ARR
  case COCO_STD_DATA_TYPE_FLOAT
  case COCO_STD_DATA_TYPE_FLOAT_ARR
  case COCO_STD_DATA_TYPE_DOUBLE
  case COCO_STD_DATA_TYPE_DOUBLE_ARR
  case COCO_STD_DATA_TYPE_JSON_STRING
  case COCO_STD_DATA_TYPE_JSON_STRING_ARR
  case COCO_STD_DATA_TYPE_MAX
  case COCO_STD_DATA_TYPE_UBOUND
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
open class Attribute : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  public init(attributeId: Swift.Int32, parent: IOTClientSDK.Capability)
  open func encode(to encoder: Swift.Encoder) throws
  open func setName(name: Swift.String)
  open func setDescription(description: Swift.String)
  open func setDataTypeValue(dataType: IOTClientSDK.Attribute.DataTypeValue)
  open func setArrayLength(arrayLength: Swift.Int)
  open func setMinValue(minValue: Any)
  open func setMaxValue(maxValue: Any)
  open func setDefaultValue(defaultValue: Any)
  open func setCurrentValue(currentValue: Any)
  open func setMinReportingInterval(minReportingInterval: Swift.UInt32)
  open func setMaxReportingInterval(maxReportingInterval: Swift.UInt32)
  open func setRealTimeUpdate(_ isRealTimeUpdate: Swift.Bool)
  open func setParent(capability: IOTClientSDK.Capability)
  public enum DataTypeValue : Swift.Int32, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_DATA_TYPE_MIN
    case DOUBLE
    case DOUBLE_ARR
    case BOOL
    case BOOL_ARR
    case STRING
    case STRING_ARR
    case JSON_STRING
    case JSON_STRING_ARR
    case COCO_DATA_TYPE_MAX
    case COCO_DATA_TYPE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.Attribute.DataTypeValue]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.Attribute.DataTypeValue] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var parentCapability: IOTClientSDK.Capability? {
    get
  }
  public var attributeId: Swift.Int32 {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var dataType: IOTClientSDK.Attribute.DataTypeValue {
    get
  }
  public var arrayLength: Swift.Int? {
    get
  }
  public var minValue: Any? {
    get
  }
  public var maxValue: Any? {
    get
  }
  public var defaultValue: Any? {
    get
  }
  public var currentValue: Any? {
    get
  }
  public var minReportingInterval: Swift.UInt32? {
    get
  }
  public var maxReportingInterval: Swift.UInt32? {
    get
  }
  public var isRealTimeUpdate: Swift.Bool {
    get
  }
  public func getIdentifier(metaData: Swift.String? = nil) -> IOTClientSDK.Identifier
  @objc deinit
}
public class InfoRequest {
  public init(networkId: Swift.String?, requestId: Swift.UInt32?, reqNodeId: Swift.UInt32?, respNodeId: Swift.UInt32?, mandatoryInfoRequestArr: [IOTClientSDK.Parameter], optionalParameters: [IOTClientSDK.Parameter], messageText: Swift.String, cmdSeqNum: Swift.UInt32)
  public var networkId: Swift.String? {
    get
  }
  public var reqNodeId: Swift.UInt32? {
    get
  }
  public var requestId: Swift.UInt32? {
    get
  }
  public var respNodeId: Swift.UInt32? {
    get
  }
  public var mandatoryInfoRequest: [IOTClientSDK.Parameter] {
    get
  }
  public var optionalParameters: [IOTClientSDK.Parameter] {
    get
  }
  public var messageText: Swift.String? {
    get
  }
  public var timeoutMs: Swift.UInt32
  @objc deinit
}
public class InfoResponse {
  public init(infoRequest: IOTClientSDK.InfoRequest, parameters: [IOTClientSDK.Parameter])
  public init(networkId: Swift.String, reqNodeId: Swift.UInt32, cmdSeqNum: Swift.UInt32, requestId: Swift.UInt32, parameters: [IOTClientSDK.Parameter])
  public enum State : Swift.Int, Swift.CaseIterable {
    case COCO_STD_MIN
    case COCO_STD_SUCCESS
    case COCO_STD_INVALID
    case COCO_STD_FAILURE
    case COCO_STD_PARTIAL_FAILURE
    case COCO_STD_TIMEOUT
    case COCO_STD_REJECTED
    case COCO_STD_MAX
    case COCO_STD_UNBOUND
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [IOTClientSDK.InfoResponse.State]
    public typealias RawValue = Swift.Int
    public static var allCases: [IOTClientSDK.InfoResponse.State] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  public var state: IOTClientSDK.InfoResponse.State? {
    get
  }
  public var networkId: Swift.String? {
    get
  }
  public var reqNodeId: Swift.UInt32? {
    get
  }
  public var requestId: Swift.UInt32? {
    get
  }
  public var parameters: [IOTClientSDK.Parameter] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InfoResponseValue : IOTClientSDK.Value {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRespAvailListenPort : IOTClientSDK.InfoResponseValue {
  public init(portArr: [Swift.UInt16])
  public var portArr: [Swift.UInt16] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRespButtonInfo : IOTClientSDK.InfoResponseValue {
  public init(buttonInfo: Swift.String)
  public var buttonInfo: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityNotification : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_NOTIFICATION_MIN
    case COCO_STD_ATTR_NOTIFICATION_MAX
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityNotification.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityNotification.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_NOTIFICATION_MIN
    case COCO_STD_CMD_NOTIFICATION_MAX
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityNotification.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityNotification.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Frame {
  public enum FrameType : Swift.Int32 {
    case COCO_STD_MEDIA_FRAME_TYPE_MIN
    case COCO_STD_MEDIA_FRAME_TYPE_NONE
    case COCO_STD_MEDIA_FRAME_TYPE_KEY
    case COCO_STD_MEDIA_FRAME_TYPE_MAX
    case COCO_STD_MEDIA_FRAME_UNBOUND
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var data: Swift.UnsafeMutablePointer<Swift.Int8>? {
    get
  }
  public var index: Swift.UInt32 {
    get
  }
  public var duration: Swift.UInt64 {
    get
  }
  public var pts: Swift.UInt64 {
    get
  }
  public var type: IOTClientSDK.Frame.FrameType {
    get
  }
  public var size: Swift.UInt32 {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityOccupancySensing : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_OCCUPANCY_MIN
    case COCO_STD_ATTR_PRESENCE_DETECTED_FLAG
    case COCO_STD_ATTR_OCCUPANCY_FLAG
    case COCO_STD_ATTR_OCCUPANCY_MAX
    case COCO_STD_ATTR_OCCUPANCY_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityOccupancySensing.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityOccupancySensing.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_OCCUPANCY_TYPE_MIN
    case COCO_STD_OCCUPANCY_TYPE_MAX
    case COCO_STD_CMD_OCCUPANCY_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityOccupancySensing.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityOccupancySensing.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityTemperatureSensing : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_TEMPERATURE_MIN
    case COCO_STD_ATTR_CURRENT_TEMP_CELSIUS
    case COCO_STD_ATTR_TEMPERATURE_MAX
    case COCO_STD_ATTR_TEMPERATURE_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityTemperatureSensing.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityTemperatureSensing.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_TEMPERATURE_MIN
    case COCO_STD_CMD_TEMPERATURE_MAX
    case COCO_STD_CMD_TEMPERATURE_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityTemperatureSensing.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityTemperatureSensing.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
open class Device : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  public init(deviceNodeId: Swift.UInt32, parent: IOTClientSDK.Network?)
  open func encode(to encoder: Swift.Encoder) throws
  open func setParent(network: IOTClientSDK.Network)
  open func setName(name: Swift.String)
  open func setDeviceType(type: Swift.Bool)
  open func setPSN(serial: Swift.String)
  open func setProductName(name: Swift.String)
  open func setMake(name: Swift.String)
  open func setModel(name: Swift.String)
  open func setFirmwareversion(version: Swift.String)
  open func setPowerSource(source: IOTClientSDK.Device.PowerSource)
  open func setReceiverType(type: IOTClientSDK.Device.ReceiverType)
  open func setExtendable(extendable: Swift.Bool)
  open func setOnline(online: Swift.Bool)
  open func addToResourceMap(resource: IOTClientSDK.Resource)
  open func removeFromResourceMap(ResourceEui: Swift.String)
  open func addProtocol(protocolSupported: IOTClientSDK.Device.ResourceProtocol)
  public enum DeviceCommandId : Swift.Int32, Swift.Codable {
    case COCO_STD_DEVICE_CMD_MIN
    case COCO_STD_DEVICE_CMD_DISCOVER_RES
    case COCO_STD_DEVICE_CMD_ADD_RES
    case COCO_STD_DEVICE_CMD_REM_RES
    case COCO_STD_DEVICE_CMD_REBOOT
    case COCO_STD_DEVICE_CMD_UPD_RES_NAME
    case COCO_STD_DEVICE_CMD_UPD_RES_META
    case COCO_STD_DEVICE_CMD_FORCE_REM_RES
    case COCO_STD_DEVICE_CMD_CONF_WIFI
    case COCO_STD_DEVICE_CMD_MAX
    case COCO_STD_DEVICE_CMD_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum ResourceProtocol : Swift.Int32, Swift.Codable {
    case COCO_STD_PROTOCOL_MIN
    case COCO_STD_PROTOCOL_ZWAVE
    case COCO_STD_PROTOCOL_ZIGBEE
    case COCO_STD_PROTOCOL_TUYA
    case COCO_STD_PROTOCOL_MAX
    case COCO_STD_PROTOCOL_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum PowerSource : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_POWER_SRC_MIN
    case COCO_STD_POWER_SRC_UNKNOWN
    case COCO_STD_POWER_SRC_MAINS_SINGLE_PHASE
    case COCO_STD_POWER_SRC_MAINS_3_PHASE
    case COCO_STD_POWER_SRC_MAINS_UNKNOWN_PHASE
    case COCO_STD_POWER_SRC_BATTERY
    case COCO_STD_POWER_SRC_DC_SOURCE
    case COCO_STD_POWER_SRC_EMERGENCY_CONST_POWER
    case COCO_STD_POWER_SRC_EMERGENCY_TRANSFER_SWITCH
    case COCO_STD_POWER_SRC_NOT_AVAILABLE
    case COCO_STD_POWER_SRC_MAX
    case COCO_STD_POWER_SRC_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.Device.PowerSource]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.Device.PowerSource] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum ReceiverType : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_RCVR_TYPE_MIN
    case COCO_STD_RCVR_TYPE_RX_ON_WHEN_IDLE
    case COCO_STD_RCVR_TYPE_PERIODIC
    case COCO_STD_RCVR_TYPE_WHEN_STIMULATED
    case COCO_STD_RCVR_TYPE_NOT_AVAILABLE
    case COCO_STD_RCVR_TYPE_MAX
    case COCO_STD_RCVR_TYPE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.Device.ReceiverType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.Device.ReceiverType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var parentNetwork: IOTClientSDK.Network? {
    get
  }
  public var deviceNodeId: Swift.UInt32 {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var devicePSN: Swift.String? {
    get
  }
  public var productName: Swift.String? {
    get
  }
  public var make: Swift.String? {
    get
  }
  public var model: Swift.String? {
    get
  }
  public var firmwareVersion: Swift.String? {
    get
  }
  public var powerSource: IOTClientSDK.Device.PowerSource? {
    get
  }
  public var receiverType: IOTClientSDK.Device.ReceiverType? {
    get
  }
  public var isExtendable: Swift.Bool {
    get
  }
  public var protocolIdArr: [IOTClientSDK.Device.ResourceProtocol] {
    get
  }
  public var resourceMap: [Swift.String : IOTClientSDK.Resource] {
    get
  }
  public var isOnline: Swift.Bool {
    get
  }
  public func getIdentifier(metaData: Swift.String? = nil) -> IOTClientSDK.Identifier
  @objc deinit
}
extension Device : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  open var hashValue: Swift.Int {
    get
  }
}
extension Device : Swift.Equatable {
  public static func == (lhs: IOTClientSDK.Device, rhs: IOTClientSDK.Device) -> Swift.Bool
}
extension Device {
  public func sendDeviceCommand(command: IOTClientSDK.Device.DeviceCommand, handler: ((IOTClientSDK.DeviceCommandStatus) -> Swift.Void)?, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
}
extension Device {
  @_hasMissingDesignatedInitializers public class DeviceCommand : IOTClientSDK.Command {
    public init(resourceEui: Swift.String?, commandID: IOTClientSDK.Device.DeviceCommandId, timeoutMs: Swift.UInt32)
    override public init(commandID: Swift.Int32, timeoutMs: Swift.UInt32 = super)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class RebootDeviceCommand : IOTClientSDK.Device.DeviceCommand {
    public init()
    override public init(resourceEui: Swift.String?, commandID: IOTClientSDK.Device.DeviceCommandId, timeoutMs: Swift.UInt32)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ConfigWIFICommand : IOTClientSDK.Device.DeviceCommand {
    public init(ssid: Swift.String, password: Swift.String, timeoutMs: Swift.UInt32 = 30)
    override public init(resourceEui: Swift.String?, commandID: IOTClientSDK.Device.DeviceCommandId, timeoutMs: Swift.UInt32)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class AddResourceCommand : IOTClientSDK.Device.DeviceCommand {
    public init(resourceEui: Swift.String?, protocolId: IOTClientSDK.Device.ResourceProtocol, resourceMetadata: Swift.String?, paramArr: [IOTClientSDK.Parameter], timeoutMs: Swift.UInt32)
    override public init(resourceEui: Swift.String?, commandID: IOTClientSDK.Device.DeviceCommandId, timeoutMs: Swift.UInt32)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class RemoveResourceCommand : IOTClientSDK.Device.DeviceCommand {
    public init(resourceEui: Swift.String, paramArr: [IOTClientSDK.Parameter], timeoutMs: Swift.UInt32)
    override public init(resourceEui: Swift.String?, commandID: IOTClientSDK.Device.DeviceCommandId, timeoutMs: Swift.UInt32)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ForceRemoveResourceCommand : IOTClientSDK.Device.DeviceCommand {
    public init(resourceEui: Swift.String, timeoutMs: Swift.UInt32)
    override public init(resourceEui: Swift.String?, commandID: IOTClientSDK.Device.DeviceCommandId, timeoutMs: Swift.UInt32)
    @objc deinit
  }
  public class DiscoverCommand : IOTClientSDK.Device.DeviceCommand {
    public init(protocolId: IOTClientSDK.Device.ResourceProtocol, timeoutMs: Swift.UInt32 = IOTClient.timeout)
    override public init(resourceEui: Swift.String?, commandID: IOTClientSDK.Device.DeviceCommandId, timeoutMs: Swift.UInt32)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class UpdateResourceName : IOTClientSDK.Device.DeviceCommand {
    public init(resource: IOTClientSDK.Resource, newName: Swift.String, timeoutMs: Swift.UInt32 = IOTClient.timeout)
    override public init(resourceEui: Swift.String?, commandID: IOTClientSDK.Device.DeviceCommandId, timeoutMs: Swift.UInt32)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class UpdateResourceMetadata : IOTClientSDK.Device.DeviceCommand {
    public init(resource: IOTClientSDK.Resource, metadata: Swift.String, timeoutMs: Swift.UInt32 = IOTClient.timeout)
    override public init(resourceEui: Swift.String?, commandID: IOTClientSDK.Device.DeviceCommandId, timeoutMs: Swift.UInt32)
    @objc deinit
  }
}
public class DeviceCommandStatus {
  public init(networkId: Swift.String, deviceNodeId: Swift.UInt32, senderNodeId: Swift.UInt32, cmdSeqNum: Swift.UInt32, status: IOTClientSDK.StatusCode)
  public var networkId: Swift.String {
    get
  }
  public var deviceNodeId: Swift.UInt32 {
    get
  }
  public var senderNodeId: Swift.UInt32 {
    get
  }
  public var cmdSeqNum: Swift.UInt32 {
    get
  }
  public var status: IOTClientSDK.StatusCode {
    get
  }
  public var impactedResourceArr: [IOTClientSDK.Resource] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers public class CapabilityStorageControl : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_STORAGE_CONTROL_MIN
    case COCO_STD_ATTR_STORAGE_CONTENT_COUNT
    case COCO_STD_ATTR_STORAGE_CAPACITY_MB
    case COCO_STD_ATTR_STORAGE_AVAILABLE_MB
    case COCO_STD_ATTR_STORAGE_SUPPORTED_TYPES_ARR
    case COCO_STD_ATTR_STORAGE_RECORDING_TIME_CONFIG
    case COCO_STD_ATTR_STORAGE_RECORDING_SIZE_CONFIG
    case COCO_STD_ATTR_STORAGE_LAST_UPDATED_CONTENT_METADATA
    case COCO_STD_ATTR_STORAGE_COOL_OFF_PERIOD
    case COCO_STD_ATTR_STORAGE_RECORDING_IN_PROGRESS
    case COCO_STD_ATTR_STORAGE_RECORDING_STARTED
    case COCO_STD_ATTR_STORAGE_CONTROL_MAX
    case COCO_STD_ATTR_STORAGE_CONTROL_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityStorageControl.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityStorageControl.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_STORAGE_CONTROL_MIN
    case COCO_STD_CMD_STORAGE_UPLOAD
    case COCO_STD_CMD_STORAGE_DOWNLOAD
    case COCO_STD_CMD_STORAGE_CONTROL_MAX
    case COCO_STD_CMD_STORAGE_CONTROL_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityStorageControl.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityStorageControl.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class CommandStorageCtrl : IOTClientSDK.Resource.ResourceCommand {
    public init(commandId: IOTClientSDK.CapabilityStorageControl.CommandId, offset: Swift.UInt32, size: Swift.UInt32)
    @objc deinit
  }
  public class StorageUpload : IOTClientSDK.CapabilityStorageControl.CommandStorageCtrl {
    public init(contentType: Swift.Int32, uploadTriggerType: Swift.Int32, uploadTriggeredUri: IOTClientSDK.UploadTriggerURI, channelPortArr: [Swift.UInt16], appendFlag: Swift.Int32, offset: Swift.UInt32, size: Swift.UInt32, channelDescriptionArr: [Swift.String], createdTimestamp: Darwin.time_t)
    override public init(commandId: IOTClientSDK.CapabilityStorageControl.CommandId, offset: Swift.UInt32, size: Swift.UInt32)
    @objc deinit
  }
  public class StorageDownload : IOTClientSDK.CapabilityStorageControl.CommandStorageCtrl {
    public init(contentId: Swift.UInt64, channelPort: Swift.UInt16, offset: Swift.UInt32, size: Swift.UInt32)
    override public init(commandId: IOTClientSDK.CapabilityStorageControl.CommandId, offset: Swift.UInt32, size: Swift.UInt32)
    @objc deinit
  }
  required public init(from decoder: Swift.Decoder) throws
  override public init(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource)
  @objc deinit
}
public enum States {
  case LOCAL_NMN
  case LOCAL_NW_DATA
  case ONLINE
  case OFFLINE
  case CONNECTING
  case BLOCKED
  public static func == (a: IOTClientSDK.States, b: IOTClientSDK.States) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ConnectivityStateManager {
  public static var shared: IOTClientSDK.ConnectivityStateManager
  public func getState(network: IOTClientSDK.Network) -> IOTClientSDK.States
  @objc deinit
}
extension ConnectivityStateManager : IOTClientSDK.CocoCallbackDelegate {
  public func NodeConnectStatusCallback(network: IOTClientSDK.Network?, nodeId _: Swift.UInt32, isOnline: Swift.Bool, nodeType: IOTClientSDK.NodeType?, coconetContext _: Swift.UnsafeMutableRawPointer?)
  public func ConnectStatusCallback(network: IOTClientSDK.Network?, coconetStatus _: IOTClientSDK.Network.State, context _: Swift.UnsafeMutableRawPointer?)
  public func NetworkDataCallback(network: IOTClientSDK.Network, coconetContext _: Swift.UnsafeMutableRawPointer?)
}
@_inheritsConvenienceInitializers public class CapabilityMediaStreaming : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_MEDIA_MIN
    case COCO_STD_ATTR_MEDIA_DESCRIPTOR
    case COCO_STD_ATTR_MEDIA_STREAM_ID_ARR
    case COCO_STD_ATTR_MEDIA_STREAM_ACTIVE_CLIENTS_ARR
    case COCO_STD_ATTR_MEDIA_STREAM_MAX_ACTIVE_CLIENTS_ARR
    case COCO_STD_ATTR_MEDIA_STREAM_REC_STATUS_ARR
    case COCO_STD_ATTR_MEDIA_STREAM_REC_SUPPORTED_ARR
    case COCO_STD_ATTR_MEDIA_STREAM_RECORDING_IN_PROGRESS
    case COCO_STD_ATTR_MEDIA_MAX
    case COCO_STD_ATTR_MEDIA_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMediaStreaming.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMediaStreaming.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum MediaTransportType : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_MEDIA_TRANSPORT_MIN
    case COCO_STD_MEDIA_TRANSPORT_TCP
    case COCO_STD_MEDIA_TRANSPORT_UDP
    case COCO_STD_MEDIA_TRANSPORT_RTP_UDP
    case COCO_STD_MEDIA_TRANSPORT_MAX
    case COCO_STD_MEDIA_TRANSPORT_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMediaStreaming.MediaTransportType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMediaStreaming.MediaTransportType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum SessionType : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_MEDIA_SESSION_MIN
    case COCO_STD_MEDIA_SESSION_BUFFERED
    case COCO_STD_MEDIA_SESSION_LIVE
    case COCO_STD_MEDIA_SESSION_MAX
    case COCO_STD_MEDIA_SESSION_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMediaStreaming.SessionType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMediaStreaming.SessionType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum DataStreamStatus : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_CLIENT_MEDIA_STREAM_MIN
    case COCO_CLIENT_MEDIA_STREAM_OPENED
    case COCO_CLIENT_MEDIA_STREAM_FAILED
    case COCO_CLIENT_MEDIA_STREAM_CLOSED
    case COCO_CLIENT_MEDIA_STREAM_TIMEOUT
    case COCO_CLIENT_MEDIA_MAX_CLIENT_REACHED
    case COCO_CLIENT_MEDIA_STREAM_MAX
    case COCO_CLIENT_MEDIA_STREAM_INVALID
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMediaStreaming.DataStreamStatus]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMediaStreaming.DataStreamStatus] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum MediaStreamStatus : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_MEDIA_STREAM_STATUS_MIN
    case COCO_STD_MEDIA_STREAM_STARTED
    case COCO_STD_MEDIA_STREAM_START_FAILED
    case COCO_STD_MEDIA_STREAM_STOPPED
    case COCO_STD_MEDIA_STREAM_STOP_FAILED
    case COCO_STD_MEDIA_STREAM_STATUS_MAX
    case COCO_STD_MEDIA_STREAM_STATUS_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMediaStreaming.MediaStreamStatus]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMediaStreaming.MediaStreamStatus] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum RecordStatus : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_MEDIA_REC_MIN
    case COCO_STD_MEDIA_REC_STARTED
    case COCO_STD_MEDIA_REC_START_FAILED
    case COCO_STD_MEDIA_REC_STOPPED
    case COCO_STD_MEDIA_REC_STOP_FAILED
    case COCO_STD_MEDIA_REC_STATUS_MAX
    case COCO_STD_MEDIA_REC_STATUS_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMediaStreaming.RecordStatus]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMediaStreaming.RecordStatus] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum RecordMode : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_MEDIA_RECORD_MIN
    case COCO_STD_MEDIA_RECORD_MANUAL_STOP
    case COCO_STD_MEDIA_RECORD_TIME
    case COCO_STD_MEDIA_RECORD_SIZE
    case COCO_STD_MEDIA_RECORD_MAX
    case COCO_STD_MEDIA_RECORD_UNBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMediaStreaming.RecordMode]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMediaStreaming.RecordMode] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_MEDIA_STREAM_MIN
    case COCO_STD_CMD_MEDIA_STREAM_START
    case COCO_STD_CMD_MEDIA_STREAM_STOP
    case COCO_STD_CMD_MEDIA_RECORD_START
    case COCO_STD_CMD_MEDIA_RECORD_STOP
    case COCO_STD_CMD_MEDIA_RECORD_CONFIG
    case COCO_STD_CMD_MEDIA_STREAM_MAX
    case COCO_STD_CMD_MEDIA_STREAM_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMediaStreaming.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMediaStreaming.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class MediaStreamingCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(commandId: IOTClientSDK.CapabilityMediaStreaming.CommandId)
    @objc deinit
  }
  public class MediaStreamOpen : IOTClientSDK.CapabilityMediaStreaming.MediaStreamingCommand {
    public init(streamId: Swift.UInt32, streamSessionId: Swift.Int32, streamDescription: Swift.String, channelPortArr: [Swift.UInt16], streamTransportTypeArr: [IOTClientSDK.CapabilityMediaStreaming.MediaTransportType], streamSessionType: IOTClientSDK.CapabilityMediaStreaming.SessionType)
    override public init(commandId: IOTClientSDK.CapabilityMediaStreaming.CommandId)
    @objc deinit
  }
  public class MediaStreamClose : IOTClientSDK.CapabilityMediaStreaming.MediaStreamingCommand {
    public init(mediaStreamingHandle: IOTClientSDK.CapabilityMediaStreaming.MediaStreamingHandle, isCloseAllStream: Swift.Bool = false)
    override public init(commandId: IOTClientSDK.CapabilityMediaStreaming.CommandId)
    @objc deinit
  }
  public class MediaStreamSendData : IOTClientSDK.CapabilityMediaStreaming.MediaStreamingCommand {
    public init(channelHandle: IOTClientSDK.CapabilityMediaStreaming.ChannelHandle, data: Swift.UnsafeMutablePointer<Swift.Int8>, len: Darwin.size_t)
    override public init(commandId: IOTClientSDK.CapabilityMediaStreaming.CommandId)
    @objc deinit
  }
  public class MediaRecordStart : IOTClientSDK.CapabilityMediaStreaming.MediaStreamingCommand {
    public init(streamIdArray: [Swift.UInt32], streamDescriptionArr: [Swift.String])
    override public init(commandId: IOTClientSDK.CapabilityMediaStreaming.CommandId)
    @objc deinit
  }
  public class MediaRecordStop : IOTClientSDK.CapabilityMediaStreaming.MediaStreamingCommand {
    public init(streamIdArray: [Swift.UInt32])
    override public init(commandId: IOTClientSDK.CapabilityMediaStreaming.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class MediaRecordConfig : IOTClientSDK.CapabilityMediaStreaming.MediaStreamingCommand {
    override public init(commandId: IOTClientSDK.CapabilityMediaStreaming.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class MediaStreamingHandle {
    public var deviceNodeId: Swift.UInt32 {
      get
    }
    public var networkId: Swift.String {
      get
    }
    public var resourceEui: Swift.String {
      get
    }
    public var streamId: Swift.UInt32 {
      get
    }
    public var streamSessionId: Swift.Int32 {
      get
    }
    public var channelHandleArr: [IOTClientSDK.CapabilityMediaStreaming.ChannelHandle] {
      get
    }
    public var streamContext: Swift.UnsafeMutableRawPointer? {
      get
    }
    public func getIdentifier() -> IOTClientSDK.Identifier
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ChannelHandle {
    public var channelPort: Swift.UInt16 {
      get
    }
    public var context: Swift.UnsafeMutableRawPointer? {
      get
    }
    @objc deinit
  }
  required public init(from decoder: Swift.Decoder) throws
  override public init(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StreamStatus {
  public var streamHandle: IOTClientSDK.CapabilityMediaStreaming.MediaStreamingHandle? {
    get
  }
  public var channelHandle: IOTClientSDK.CapabilityMediaStreaming.ChannelHandle? {
    get
  }
  public var channelPort: Swift.UInt16 {
    get
  }
  public var status: IOTClientSDK.CapabilityMediaStreaming.DataStreamStatus {
    get
  }
  @objc deinit
}
public class StreamReceivedData {
  public init(streamHandle: IOTClientSDK.CapabilityMediaStreaming.MediaStreamingHandle? = nil, channelHandle: IOTClientSDK.CapabilityMediaStreaming.ChannelHandle? = nil, data: Any? = nil, len: Darwin.size_t)
  public var streamHandle: IOTClientSDK.CapabilityMediaStreaming.MediaStreamingHandle? {
    get
  }
  public var channelHandle: IOTClientSDK.CapabilityMediaStreaming.ChannelHandle? {
    get
  }
  public var data: Any? {
    get
  }
  public var len: Darwin.size_t {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRespPIN : IOTClientSDK.InfoResponseValue {
  public init(pin: Swift.String)
  public var pin: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRequesButtonInfo : IOTClientSDK.InfoRequestValue {
  public init(applianceId: Swift.String, resourceEui: Swift.String)
  public var applianceId: Swift.String {
    get
  }
  public var resourceEui: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoReqContentSearch : IOTClientSDK.InfoRequestValue {
  public init(reqSearchCount: Swift.UInt8, offsetIndex: Swift.UInt32, startEpochTime: Darwin.time_t, endEpochTime: Darwin.time_t, contentType: IOTClientSDK.InfoReqContentSearch.StorageContentType, uploadTriggerType: IOTClientSDK.InfoReqContentSearch.UploadTriggerType, uploadTriggeredUri: IOTClientSDK.UploadTriggerURI?, sourceUri: IOTClientSDK.SourceURI?, sortByType: IOTClientSDK.InfoReqSearch.SortByType, sortByOrder: IOTClientSDK.InfoReqSearch.SortByOrder)
  public enum StorageContentType : Swift.Int32, Swift.CaseIterable {
    case COCO_STD_STORAGE_CONTENT_MIN
    case COCO_STD_STORAGE_CONTENT_STREAM
    case COCO_STD_STORAGE_CONTENT_ATTRIBUTE
    case COCO_STD_STORAGE_CONTENT_FILE
    case COCO_STD_STORAGE_CONTENT_MAX
    case COCO_STD_STORAGE_CONTENT_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.InfoReqContentSearch.StorageContentType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.InfoReqContentSearch.StorageContentType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum UploadTriggerType : Swift.Int32, Swift.CaseIterable {
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_MIN
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_USER
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_ATTRB
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_SCENE
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_RULE
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_MAX
    case COCO_STD_STORAGE_UPLOAD_TRIGGER_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.InfoReqContentSearch.UploadTriggerType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.InfoReqContentSearch.UploadTriggerType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var reqSearchCount: Swift.UInt8 {
    get
  }
  public var offsetIndex: Swift.UInt32 {
    get
  }
  public var startEpochTime: Darwin.time_t {
    get
  }
  public var endEpochTime: Darwin.time_t {
    get
  }
  public var contentType: IOTClientSDK.InfoReqContentSearch.StorageContentType {
    get
  }
  public var uploadTriggerType: IOTClientSDK.InfoReqContentSearch.UploadTriggerType {
    get
  }
  public var uploadTriggeredUri: IOTClientSDK.UploadTriggerURI? {
    get
  }
  public var sourceUri: IOTClientSDK.SourceURI? {
    get
  }
  public var sortByType: IOTClientSDK.InfoReqSearch.SortByType {
    get
  }
  public var sortByOrder: IOTClientSDK.InfoReqSearch.SortByOrder {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class COCOError {
  public enum ErrorCode : Swift.Int32 {
    case COCO_STD_CMD_ERR_CODE_MIN
    case COCO_STD_CMD_ERR_BAD_REQUEST
    case COCO_STD_CMD_ERR_MISSING_PARAMS
    case COCO_STD_CMD_ERR_INVALID_PARAMS
    case COCO_STD_CMD_ERR_INVALID_RANGE
    case COCO_STD_CMD_ERR_DUP_DATA
    case COCO_STD_CMD_ERR_USR_NOT_EXISTS
    case COCO_STD_CMD_ERR_GW_NOT_IN_NW
    case COCO_STD_CMD_ERR_NAME_RECURRING
    case COCO_STD_CMD_ERR_USR_EXISTS
    case COCO_STD_CMD_ERR_DUP_PRODUCT
    case COCO_STD_CMD_ERR_AUTH_REQUIRED
    case COCO_STD_CMD_ERR_SESSION_EXPIRED
    case COCO_STD_CMD_ERR_INVALID_CREDENTIALS
    case COCO_STD_CMD_ERR_ACCESS_RESTRICTED
    case COCO_STD_CMD_ERR_GW_BUSY
    case COCO_STD_CMD_ERR_JOIN_PROGRESS
    case COCO_STD_CMD_ERR_GW_NOT_PROVISION
    case COCO_STD_CMD_ERR_GW_ALREADY_OWNED
    case COCO_STD_CMD_ERR_ALREADY_PROGRESS
    case COCO_STD_CMD_ERR_DISABLE_APPLICATION
    case COCO_STD_CMD_ERR_NOT_FOUND
    case COCO_STD_CMD_ERR_FILE_NOT_FOUND
    case COCO_STD_CMD_ERR_RES_NOT_FOUND
    case COCO_STD_CMD_ERR_INPUT_RES_NOT_FOUND
    case COCO_STD_CMD_ERR_NW_UNALLOCATED
    case COCO_STD_CMD_ERR_INTERNAL_SERVER
    case COCO_STD_CMD_ERR_PAYMENT_FAILED
    case COCO_STD_CMD_ERR_TX_FAILED
    case COCO_STD_CMD_ERR_DATABASE_ERROR
    case COCO_STD_CMD_ERR_SERVER_ERROR
    case COCO_STD_CMD_ERR_HTTP_TIMEOUT
    case COCO_STD_CMD_ERR_CMD_TIMEOUT
    case COCO_STD_CMD_ERR_NETWORK_BLOCKED
    case COCO_STD_CMD_ERR_CODE_MAX
    case COCO_STD_CMD_ERR_CODE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var code: IOTClientSDK.COCOError.ErrorCode {
    get
  }
  public var message: Swift.String {
    get
  }
  public var fieldName: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Native {
  public enum STD_CMD_CAP_ID : Swift.Int32, Swift.CaseIterable {
    case COCO_STD_CAP_MIN
    case COCO_STD_CAP_CUSTOM
    case COCO_STD_CAP_CONFIGURATION
    case COCO_STD_CAP_BASIC
    case COCO_STD_CAP_ON_OFF
    case COCO_STD_CAP_LEVEL_CTRL
    case COCO_STD_CAP_COLOR_CTRL
    case COCO_STD_CAP_DOOR_LOCK
    case COCO_STD_CAP_IDENTITY
    case COCO_STD_CAP_METERING
    case COCO_STD_CAP_NOTIFICATION
    case COCO_STD_CAP_MOTION_SENSING
    case COCO_STD_CAP_OCCUPANCY_SENSING
    case COCO_STD_CAP_DOOR_WINDOW_SENSING
    case COCO_STD_CAP_WATER_LEVEL_SENSING
    case COCO_STD_CAP_CARBON_MONOXIDE_SENSING
    case COCO_STD_CAP_FIRE_DETECTION
    case COCO_STD_CAP_TEMPERATURE_MEASUREMENT
    case COCO_STD_CAP_ILLUMINANCE_MEASUREMENT
    case COCO_STD_CAP_POWER_CONFIGURATION
    case COCO_STD_CAP_TUNNEL
    case COCO_STD_CAP_IMAGE_CTRL
    case COCO_STD_CAP_SNAPSHOT
    case COCO_STD_CAP_HEAT_SENSING
    case COCO_STD_CAP_MAX
    case COCO_STD_CAP_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.Native.STD_CMD_CAP_ID]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.Native.STD_CMD_CAP_ID] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public static func coco_client_get_available_channel_port(device: IOTClientSDK.Device, portCount: Swift.UInt16) -> [Swift.UInt16]
  @objc deinit
}
@_inheritsConvenienceInitializers public class CapabilityImageCtrl : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_IMAGE_CTRL_MIN
    case COCO_STD_ATTR_IMAGE_CTRL_AF_MODE_FLAG
    case COCO_STD_ATTR_IMAGE_CTRL_AE_MODE_FLAG
    case COCO_STD_ATTR_IMAGE_CTRL_AWB_MODE_FLAG
    case COCO_STD_ATTR_IMAGE_CTRL_ZOOM_TYPE
    case COCO_STD_ATTR_IMAGE_CTRL_IRCUT_MODE_TYPE
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_PRESET_TYPE
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_HUE_PCT
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_SATURATION_PCT
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_CONTRAST_PCT
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_BRIGHTNESS_PCT
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_FLIP_FLAG
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_MIRROR_FLAG
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_TEXT
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_TEXT_X_POSITION
    case COCO_STD_ATTR_IMAGE_CTRL_IMG_TEXT_Y_POSITION
    case COCO_STD_ATTR_IMAGE_CTR_MAX
    case COCO_STD_ATTR_IMAGE_CTRL_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityImageCtrl.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityImageCtrl.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_IMAGE_MIN
    case COCO_STD_CMD_IMAGE_SET_AF_MODE
    case COCO_STD_CMD_IMAGE_SET_AE_MODE
    case COCO_STD_CMD_IMAGE_SET_AWB_MODE
    case COCO_STD_CMD_IMAGE_SET_ZOOM
    case COCO_STD_CMD_IMAGE_SET_IRCUT_MODE
    case COCO_STD_CMD_IMAGE_SET_PRESET
    case COCO_STD_CMD_IMAGE_SET_HUE
    case COCO_STD_CMD_IMAGE_SET_SATURATION
    case COCO_STD_CMD_IMAGE_SET_CONTRAST
    case COCO_STD_CMD_IMAGE_SET_BRIGHTNESS
    case COCO_STD_CMD_IMAGE_SET_FLIP
    case COCO_STD_CMD_IMAGE_SET_MIRROR
    case COCO_STD_CMD_IMAGE_SET_TEXT
    case COCO_STD_CMD_IMAGE_MAX
    case COCO_STD_CMD_IMAGE_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityImageCtrl.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityImageCtrl.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class ImageCtrlCommand : IOTClientSDK.Resource.ResourceCommand {
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ImgSetText : IOTClientSDK.CapabilityImageCtrl.ImageCtrlCommand {
    public init(text: Swift.String, xPosition: Swift.UInt8, yPosition: Swift.UInt8)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ImgSetMirror : IOTClientSDK.CapabilityImageCtrl.ImageCtrlCommand {
    public init(onFlag: Swift.Bool)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ImgSetFlip : IOTClientSDK.CapabilityImageCtrl.ImageCtrlCommand {
    public init(onFlag: Swift.Bool)
    @objc deinit
  }
  required public init(from decoder: Swift.Decoder) throws
  override public init(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource)
  @objc deinit
}
@_inheritsConvenienceInitializers public class CapabilitySnapshot : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_SNAPSHOT_MIN
    case COCO_STD_ATTR_SNAPSHOT_IMG_SUPPORT_RESOLUTION_HEIGHT_ARR
    case COCO_STD_ATTR_SNAPSHOT_IMG_SUPPORT_RESOLUTION_WIDTH_ARR
    case COCO_STD_ATTR_SNAPSHOT_IMG_DEFAULT_RESOLUTION_HEIGHT
    case COCO_STD_ATTR_SNAPSHOT_IMG_DEFAULT_RESOLUTION_WIDTH
    case COCO_STD_ATTR_SNAPSHOT_MAX
    case COCO_STD_ATTR_SNAPSHOT_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilitySnapshot.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilitySnapshot.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_SNAPSHOT_MIN
    case COCO_STD_CMD_SNAPSHOT_IMAGE
    case COCO_STD_CMD_SNAPSHOT_MAX
    case COCO_STD_CMD_SNAPSHOT_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilitySnapshot.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilitySnapshot.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum SnapShotStatus : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_CLIENT_SNAPSHOT_MIN
    case COCO_CLIENT_SNAPSHOT_SUCCESS
    case COCO_CLIENT_SNAPSHOT_FAILURE
    case COCO_CLIENT_SNAPSHOT_TIMEOUT
    case COCO_CLIENT_SNAPSHOT_MAX
    case COCO_CLIENT_SNAPSHOT_INVALID
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilitySnapshot.SnapShotStatus]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilitySnapshot.SnapShotStatus] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class CommandSnapshot : IOTClientSDK.Resource.ResourceCommand {
    public init(commandID: IOTClientSDK.CapabilitySnapshot.CommandId, pixelHeight: Swift.UInt16, pixelWidth: Swift.UInt16)
    public var pixelHeight: Swift.UInt16 {
      get
    }
    public var pixelWidth: Swift.UInt16 {
      get
    }
    @objc deinit
  }
  public class CommandSnapshotImage : IOTClientSDK.CapabilitySnapshot.CommandSnapshot {
    public init(channelPort: Swift.UInt32, pixelHeight: Swift.UInt16, pixelWidth: Swift.UInt16)
    override public init(commandID: IOTClientSDK.CapabilitySnapshot.CommandId, pixelHeight: Swift.UInt16, pixelWidth: Swift.UInt16)
    @objc deinit
  }
  public class CommandCaptureSnapshot : IOTClientSDK.CapabilitySnapshot.CommandSnapshot {
    public init(commandID: IOTClientSDK.CapabilitySnapshot.CommandId, pixelHeight: Swift.UInt16, pixelWidth: Swift.UInt16, downloadPath: Swift.String, delegate: IOTClientSDK.SnapshotDelegate, timeoutMs: Swift.UInt32)
    public var downloadPath: Swift.String {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilitySnapshot.CommandId, pixelHeight: Swift.UInt16, pixelWidth: Swift.UInt16)
    @objc deinit
  }
  public func captureSnapshot(pixelHeight: Swift.UInt16, pixelWidth: Swift.UInt16, downloadPath: Swift.String, delegate: IOTClientSDK.SnapshotDelegate, timeoutMs: Swift.UInt32, commandContext: Swift.UnsafeMutableRawPointer?)
  required public init(from decoder: Swift.Decoder) throws
  override public init(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource)
  @objc deinit
}
public class Parameter {
  public init(key: IOTClientSDK.Parameter.Key?, value: IOTClientSDK.Value?)
  public enum Key : Swift.Int32, Swift.CaseIterable {
    case COCO_STD_PARAM_MIN
    case COCO_STD_PARAM_USER_DEFINED
    case COCO_STD_PARAM_USERNAME
    case COCO_STD_PARAM_PASSWORD
    case COCO_STD_PARAM_PIN
    case COCO_STD_PARAM_OTP
    case COCO_STD_PARAM_INSTALL_CODE
    case COCO_STD_PARAM_CSA
    case COCO_STD_PARAM_DSK
    case COCO_STD_PARAM_RESRC_NAME
    case COCO_STD_PARAM_AVAIL_LISTEN_PORT
    case COCO_STD_PARAM_CONTENT_SEARCH
    case COCO_STD_PARAM_CONTENT_PLAYBACK
    case COCO_STD_PARAM_STREAM_BUFFER_SIZES
    case COCO_STD_PARAM_PAIRING_TYPE
    case COCO_STD_PARAM_TIMEZONE
    case COCO_STD_PARAM_REMOTE_PAIRING_CODES
    case COCO_STD_PARAM_REMOTE_PAIR_CAPABILITIES
    case COCO_STD_PARAM_REMOTE_BUTTON_INFO
    case COCO_STD_PARAM_SEARCH
    case COCO_STD_PARAM_MAX
    case COCO_STD_PARAM_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.Parameter.Key]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.Parameter.Key] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var key: IOTClientSDK.Parameter.Key? {
    get
  }
  public var value: IOTClientSDK.Value? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityRealTimePosition : IOTClientSDK.Capability {
  override public init(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource)
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_REAL_TIME_POSITION_MIN
    case COCO_STD_ATTR_REAL_TIME_POSITION_BEACON_LOC
    case COCO_STD_ATTR_REAL_TIME_POSITION_MAX
    case COCO_STD_ATTR_REAL_TIME_POSITION_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityRealTimePosition.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityRealTimePosition.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class BeaconLocation : Swift.Codable {
    public var locationId: Swift.String?
    public var lotId: Swift.String?
    public var xCoordinate: Swift.Double?
    public var yCoordinate: Swift.Double?
    public var beaconId: Swift.String?
    public var deviceResourceName: Swift.String?
    public var radius: Swift.Double?
    public var errorPrecision: Swift.Double?
    public var rssi: Swift.Int?
    public var measuredPower: Swift.Int?
    @objc deinit
    public func encode(to encoder: Swift.Encoder) throws
    required public init(from decoder: Swift.Decoder) throws
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityNetworkConfiguration : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_NW_CONFIG_MIN
    case COCO_STD_ATTR_NW_CONFIG_RSSI
    case COCO_STD_ATTR_NW_CONFIG_NW_NAME
    case COCO_STD_ATTR_NW_CONFIG_MAX
    case COCO_STD_ATTR_NW_CONFIG_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityNetworkConfiguration.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityNetworkConfiguration.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRespSearch : IOTClientSDK.InfoResponseValue {
  public init(totalSearchCount: Swift.Int64, reqSearchCount: Swift.UInt8, searchType: IOTClientSDK.InfoReqSearch.SearchType, searchResultsArr: Any)
  public var totalSearchCount: Swift.Int64 {
    get
  }
  public var reqSearchCount: Swift.UInt8 {
    get
  }
  public var searchType: IOTClientSDK.InfoReqSearch.SearchType {
    get
  }
  public var searchResultsArr: Any {
    get
  }
  @objc deinit
}
public class SearchResultBrand {
  public init(brandId: Swift.UInt16, brandName: Swift.String)
  public var brandId: Swift.UInt16 {
    get
  }
  public var brandName: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ResourceTemplate : Swift.Codable {
  public var zoneId: Swift.UInt16 {
    get
  }
  public var resrcTemplateId: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var icon: Swift.String {
    get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InfoRespRemotePairingCode : IOTClientSDK.InfoResponseValue {
  public init(pairingCodes: [Swift.UInt16])
  public var pairingCodes: [Swift.UInt16] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Message {
  public enum MessageType : Swift.Int32, Swift.CaseIterable {
    case COCO_STD_MESSAGE_MIN
    case COCO_STD_MESSAGE_PROMPT
    case COCO_STD_MESSAGE_INFO
    case COCO_STD_MESSAGE_ERROR
    case COCO_STD_MESSAGE_WARNING
    case COCO_STD_MESSAGE_CRITICAL
    case COCO_STD_MESSAGE_PROTOCOL
    case COCO_STD_MESSAGE_MAX
    case COCO_STD_MESSAGE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.Message.MessageType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.Message.MessageType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var networkId: Swift.String {
    get
  }
  public var deviceNodeId: Swift.UInt32 {
    get
  }
  public var devCmdSenderNodeId: Swift.UInt32 {
    get
  }
  public var devCmdSeqNum: Swift.UInt32 {
    get
  }
  public var messageTitle: Swift.String {
    get
  }
  public var messageText: Swift.String {
    get
  }
  public var type: IOTClientSDK.Message.MessageType {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityKeyPressSensing : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_KEYPRESS_MIN
    case COCO_STD_ATTR_KEYPRESS_SCENE_ID
    case COCO_STD_ATTR_KEYPRESS_SCENE_KEY
    case COCO_STD_ATTR_KEYPRESS_DISARM_FLAG
    case COCO_STD_ATTR_KEYPRESS_ARM_DAY_FLAG
    case COCO_STD_ATTR_KEYPRESS_ARM_NIGHT_FLAG
    case COCO_STD_ATTR_KEYPRESS_ARM_ALL_FLAG
    case COCO_STD_ATTR_KEYPRESS_PANIC_FLAG
    case COCO_STD_ATTR_KEYPRESS_EMERGENCY_FLAG
    case COCO_STD_ATTR_KEYPRESS_FALL_TRIGGER_FLAG
    case COCO_STD_ATTR_KEYPRESS_ACTIVATED_COMBO_ID
    case COCO_STD_ATTR_KEYPRESS_COMBO_NAME_ARR
    case COCO_STD_ATTR_KEYPRESS_MAX
    case COCO_STD_ATTR_KEYPRESS_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityKeyPressSensing.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityKeyPressSensing.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_KEYPRESS_MIN
    case COCO_STD_CMD_KEYPRESS_SET_COMBO_NAME
    case COCO_STD_CMD_KEYPRESS_MAX
    case COCO_STD_CMD_﻿KEYPRESS_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityKeyPressSensing.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityKeyPressSensing.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum KeypressScene : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_KEYPRESS_SCENE_MIN
    case COCO_STD_KEYPRESS_SCENE_SINGLE
    case COCO_STD_KEYPRESS_SCENE_DOUBLE
    case COCO_STD_KEYPRESS_SCENE_TRIPLE
    case COCO_STD_KEYPRESS_SCENE_QUAD
    case COCO_STD_KEYPRESS_SCENE_QUINT
    case COCO_STD_KEYPRESS_SCENE_HOLD
    case COCO_STD_KEYPRESS_SCENE_RELEASE
    case COCO_STD_KEYPRESS_SCENE_MAX
    case COCO_STD_KEYPRESS_SCENE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityKeyPressSensing.KeypressScene]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityKeyPressSensing.KeypressScene] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
public class Tunnel {
  public init(tunnelHandle: Swift.OpaquePointer?, status: IOTClientSDK.CapabilityTunnel.CommandTunnel.Status?, port: Swift.UInt16)
  public var tunnelHandle: Swift.OpaquePointer? {
    get
  }
  public var port: Swift.UInt16? {
    get
  }
  public var status: IOTClientSDK.CapabilityTunnel.CommandTunnel.Status? {
    get
  }
  public func getTunnelHandle() -> Swift.OpaquePointer?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityMeter : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_METER_MIN
    case COCO_STD_ATTR_METER_CONSUMPTION_KWH
    case COCO_STD_ATTR_METER_DEMAND_WATT
    case COCO_STD_ATTR_METER_LAST_READ_TIME_ARR
    case COCO_STD_ATTR_METER_MULTIPLIER
    case COCO_STD_ATTR_METER_DIVISOR
    case COCO_STD_ATTR_METER_CONS_PROD_FMT_DIGITS
    case COCO_STD_ATTR_METER_CONS_PROD_FMT_DECIMALS
    case COCO_STD_ATTR_METER_DEMAND_FMT_DIGITS
    case COCO_STD_ATTR_METER_DEMAND_DECIMALS
    case COCO_STD_ATTR_METER_PRODUCTION_KWH
    case COCO_STD_ATTR_METER_UNIT_OF_MEASURE
    case COCO_STD_ATTR_METER_MAX
    case COCO_STD_ATTR_METER_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMeter.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMeter.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_METER_MIN
    case COCO_STD_CMD_RESET
    case COCO_STD_CMD_GET_CONSUMPTION
    case COCO_STD_CMD_GET_DEMAND
    case COCO_STD_CMD_METER_MAX
    case COCO_STD_CMD_METER_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMeter.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMeter.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum ConsumptionScale : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CONS_SCALE_MIN
    case COCO_STD_CONS_SCALE_KW
    case COCO_STD_CONS_SCALE_CUBIC_METER_PER_HR
    case COCO_STD_CONS_SCALE_CUBIC_FEET_PER_HR
    case COCO_STD_CONS_SCALE_CENTI_CUBIC_FEET_PER_HR
    case COCO_STD_CONS_SCALE_US_GALLON_PER_HR
    case COCO_STD_CONS_SCALE_IMP_GALLON_PER_HR
    case COCO_STD_CONS_SCALE_BTU_PER_HR
    case COCO_STD_CONS_SCALE_LITERS_PER_HR
    case COCO_STD_CONS_SCALE_KPA_GAUGE
    case COCO_STD_CONS_SCALE_KPA_ABSOLUTE
    case COCO_STD_CONS_SCALE_KILO_CUBIC_FEET_PER_HR
    case COCO_STD_CONS_SCALE_UNIT_LESS
    case COCO_STD_CONS_SCALE_MJ_PER_SEC
    case COCO_STD_CONS_SCALE_MAX
    case COCO_STD_CONS_SCALE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMeter.ConsumptionScale]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMeter.ConsumptionScale] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum DemandScale : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_DEMAND_SCALE_MIN
    case COCO_STD_DEMAND_SCALE_KWH
    case COCO_STD_DEMAND_SCALE_CUBIC_METER
    case COCO_STD_DEMAND_SCALE_CUBIC_FEET
    case COCO_STD_DEMAND_SCALE_CENTI_CUBIC_FEET
    case COCO_STD_DEMAND_SCALE_US_GALLON
    case COCO_STD_DEMAND_SCALE_IMP_GALLON
    case COCO_STD_DEMAND_SCALE_BTU
    case COCO_STD_DEMAND_SCALE_LITERS
    case COCO_STD_DEMAND_SCALE_KPA_GAUGE
    case COCO_STD_DEMAND_SCALE_KPA_ABSOLUTE
    case COCO_STD_DEMAND_SCALE_KILO_CUBIC_FEET
    case COCO_STD_DEMAND_SCALE_UNIT_LESS
    case COCO_STD_DEMAND_SCALE_MJ
    case COCO_STD_DEMAND_SCALE_MAX
    case COCO_STD_DEMAND_SCALE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMeter.DemandScale]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMeter.DemandScale] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class MeterCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(commandID: IOTClientSDK.CapabilityMeter.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Demand : IOTClientSDK.CapabilityMeter.MeterCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityMeter.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Consumption : IOTClientSDK.CapabilityMeter.MeterCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityMeter.CommandId)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
public protocol Creator {
  func createNetwork(networkId: Swift.String) -> IOTClientSDK.Network
  func createDevice(deviceNodeId: Swift.UInt32, parent: IOTClientSDK.Network) -> IOTClientSDK.Device
  func createZone(zoneId: Swift.UInt16, parent: IOTClientSDK.Network) -> IOTClientSDK.Zone
  func createScene(sceneId: Swift.UInt16, parent: IOTClientSDK.Network) -> IOTClientSDK.Scene
  func createResource(eui: Swift.String, parentDevice: IOTClientSDK.Device) -> IOTClientSDK.Resource
  func createCapability(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource) -> IOTClientSDK.Capability
  func createAttribute(attributeId: Swift.Int32, parent: IOTClientSDK.Capability) -> IOTClientSDK.Attribute
}
extension Creator {
  public func createNetwork(networkId: Swift.String) -> IOTClientSDK.Network
  public func createDevice(deviceNodeId: Swift.UInt32, parent: IOTClientSDK.Network) -> IOTClientSDK.Device
  public func createZone(zoneId: Swift.UInt16, parent: IOTClientSDK.Network) -> IOTClientSDK.Zone
  public func createScene(sceneId: Swift.UInt16, parent: IOTClientSDK.Network) -> IOTClientSDK.Scene
  public func createResource(eui: Swift.String, parentDevice: IOTClientSDK.Device) -> IOTClientSDK.Resource
  public func createCapability(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource) -> IOTClientSDK.Capability
  public func createAttribute(attributeId: Swift.Int32, parent: IOTClientSDK.Capability) -> IOTClientSDK.Attribute
}
open class CommandResponse : Swift.Codable {
  public init(commandId: Swift.Int32)
  public var commandId: Swift.Int32 {
    get
  }
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class TunnelRTSPParameter : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
open class SceneAction : Swift.Hashable, Swift.Codable {
  public init(sceneId: Swift.UInt16)
  public var sceneId: Swift.UInt16 {
    get
  }
  public static func == (lhs: IOTClientSDK.SceneAction, rhs: IOTClientSDK.SceneAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  open var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityDlock : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_LOCK_MIN
    case COCO_STD_ATTR_LOCKED_FLAG
    case COCO_STD_ATTR_LOCK_USER_ID_ARR
    case COCO_STD_ATTR_LOCK_PIN_CODE_ARR
    case COCO_STD_ATTR_LOCK_USER_STATUS_ARR
    case COCO_STD_ATTR_LOCK_USER_TYPE_ARR
    case COCO_STD_ATTR_LOCK_MAX
    case COCO_STD_ATTR_LOCK_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityDlock.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityDlock.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_DOOR_LOCK_MIN
    case COCO_STD_CMD_LOCK
    case COCO_STD_CMD_UNLOCK
    case COCO_STD_CMD_TOGGLE_DOOR_LOCK
    case COCO_STD_CMD_SET_PIN_CODE
    case COCO_STD_CMD_CLEAR_PIN_CODE
    case COCO_STD_CMD_SET_USER_STATUS
    case COCO_STD_CMD_SET_USER_TYPE
    case COCO_STD_CMD_GET_LOCK_STATUS
    case COCO_STD_CMD_GET_PIN_CODE
    case COCO_STD_CMD_GET_USER_STATUS
    case COCO_STD_CMD_GET_USER_TYPE
    case COCO_STD_CMD_DOOR_LOCK_MAX
    case COCO_STD_CMD_LOCK_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityDlock.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityDlock.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum UserStatus : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_DL_USER_STATUS_MIN
    case COCO_STD_DL_STATUS_AVAILABLE
    case COCO_STD_DL_STATUS_ENABLED
    case COCO_STD_DL_STATUS_DISABLED
    case COCO_STD_DL_USER_STATUS_MAX
    case COCO_STD_LOCK_USER_STATUS_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityDlock.UserStatus]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityDlock.UserStatus] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum UserType : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_DL_USER_TYPE_MIN
    case COCO_STD_DL_UNRESTRICTED_USER
    case COCO_STD_DL_YEAR_DAY_SCH_USER
    case COCO_STD_DL_WEEK_DAY_SCH_USER
    case COCO_STD_DL_MASTER_USER
    case COCO_STD_DL_NON_ACCESS_USER
    case COCO_STD_DL_USER_TYPE_MAX
    case COCO_STD_LOCK_USER_TYPE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityDlock.UserType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityDlock.UserType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class DoorLockCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(commandID: IOTClientSDK.CapabilityDlock.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class LockDoor : IOTClientSDK.CapabilityDlock.DoorLockCommand {
    public init(pinCode: Swift.String)
    public var pinCode: Swift.String {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityDlock.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class UnLockDoor : IOTClientSDK.CapabilityDlock.DoorLockCommand {
    public init(pinCode: Swift.String)
    public init(pinCode: Swift.String, timeOut: Swift.UInt32)
    public var pinCode: Swift.String {
      get
    }
    public var timeOut: Swift.UInt32 {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityDlock.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class LockToggle : IOTClientSDK.CapabilityDlock.DoorLockCommand {
    public init(pinRfidCode: Swift.String)
    public var pinRfidCode: Swift.String {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityDlock.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class LockSetPin : IOTClientSDK.CapabilityDlock.DoorLockCommand {
    public init(userId: Swift.UInt32, userStatus: IOTClientSDK.CapabilityDlock.UserStatus, userType: IOTClientSDK.CapabilityDlock.UserType, pinRfidCode: Swift.String)
    public var userId: Swift.UInt32 {
      get
    }
    public var userStatus: IOTClientSDK.CapabilityDlock.UserStatus {
      get
    }
    public var userType: IOTClientSDK.CapabilityDlock.UserType {
      get
    }
    public var pinRfidCode: Swift.String {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityDlock.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class LockClearPin : IOTClientSDK.CapabilityDlock.DoorLockCommand {
    public init(userId: Swift.UInt32)
    public var userId: Swift.UInt32 {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityDlock.CommandId)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoReqRemoteParingCodes : IOTClientSDK.InfoRequestValue {
  public init(brandId: Swift.UInt16, resourceEui: Swift.String)
  public var brandId: Swift.UInt16 {
    get
  }
  public var resourceEui: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityVibrationSensing : IOTClientSDK.Capability {
  override public init(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource)
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_VIBRATION_MIN
    case COCO_STD_ATTR_MOVEMENT_DETECTED_FLAG
    case COCO_STD_ATTR_VIBRATION_DETECTED_FLAG
    case COCO_STD_ATTR_VIBRATION_MAX
    case COCO_STD_ATTR_VIBRATION_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityVibrationSensing.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityVibrationSensing.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_VIBRATION_MIN
    case COCO_STD_CMD_VIBRATION_MAX
    case COCO_STD_CMD_VIBRATION_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityVibrationSensing.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityVibrationSensing.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityTunnel : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_TUNNEL_MIN
    case COCO_STD_ATTR_TUNNEL_SUPPORTED_TRANSPORT_TYPE_COUNT
    case COCO_STD_ATTR_TUNNEL_SUPPORTED_TRANSPORT_TYPE_ARR
    case COCO_STD_ATTR_TUNNEL_SUPPORTED_PROTOCOL_COUNT
    case COCO_STD_ATTR_TUNNEL_SUPPORTED_PROTOCOL_ARR
    case COCO_STD_ATTR_TUNNEL_SUPPORTED_PROTOCOL_METADATA_ARR
    case COCO_STD_ATTR_TUNNEL_CURRENT_ACTIVE_CLIENTS_COUNT
    case COCO_STD_ATTR_TUNNEL_CURRENT_ACTIVE_CLIENTS_ARR
    case COCO_STD_ATTR_TUNNEL_MAX_ACTIVE_CLIENTS_COUNT
    case COCO_STD_ATTR_TUNNEL_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityTunnel.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityTunnel.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum IPVersion : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_TUNNEL_IP_VER_MIN
    case COCO_STD_TUNNEL_IP_VER_4
    case COCO_STD_TUNNEL_IP_VER_6
    case COCO_STD_TUNNEL_IP_VER_MAX
    case COCO_STD_TUNNEL_IP_VER_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityTunnel.IPVersion]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityTunnel.IPVersion] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum TunnelTransport : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_TUNNEL_TRANSPORT_MIN
    case COCO_STD_TUNNEL_TRANSPORT_TCP
    case COCO_STD_TUNNEL_TRANSPORT_UDP
    case COCO_STD_TUNNEL_TRANSPORT_MAX
    case COCO_STD_TUNNEL_TRANSPORT_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityTunnel.TunnelTransport]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityTunnel.TunnelTransport] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum TunnelType : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_TUNNEL_TYPE_MIN
    case COCO_STD_TUNNEL_TYPE_LISTEN
    case COCO_STD_TUNNEL_TYPE_CONNECT
    case COCO_STD_TUNNEL_TYPE_MAX
    case COCO_STD_TUNNEL_TYPE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityTunnel.TunnelType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityTunnel.TunnelType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum TunnelProtocol : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_TUNNEL_PROTOCOL_MIN
    case COCO_STD_TUNNEL_PROTOCOL_RTSP
    case COCO_STD_TUNNEL_PROTOCOL_MAX
    case COCO_STD_TUNNEL_PROTOCOL_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityTunnel.TunnelProtocol]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityTunnel.TunnelProtocol] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_TUNNEL_MIN
    case COCO_STD_CMD_TUNNEL_OPEN
    case COCO_STD_CMD_TUNNEL_CLOSE
    case COCO_STD_CMD_TUNNEL_MAX
    case COCO_STD_CMD_TUNNEL_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityTunnel.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityTunnel.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class CommandTunnel : IOTClientSDK.Resource.ResourceCommand {
    public init(commandID: IOTClientSDK.CapabilityTunnel.CommandId, timeoutMs: Swift.UInt32)
    public enum Status : Swift.Int32, Swift.Codable, Swift.CaseIterable {
      case COCO_TUNNEL_STATUS_MIN
      case COCO_TUNNEL_OPENING
      case COCO_TUNNEL_OPENED
      case COCO_TUNNEL_REOPENED
      case COCO_TUNNEL_OPEN_FAILED
      case COCO_TUNNEL_CLOSED
      case COCO_TUNNEL_CLOSE_FAILED
      case COCO_TUNNEL_TIMEOUT
      case COCO_TUNNEL_MAX_CLIENT_REACHED
      case COCO_TUNNEL_STATUS_MAX
      case COCO_TUNNEL_STATUS_UBOUND
      public init?(rawValue: Swift.Int32)
      public typealias AllCases = [IOTClientSDK.CapabilityTunnel.CommandTunnel.Status]
      public typealias RawValue = Swift.Int32
      public static var allCases: [IOTClientSDK.CapabilityTunnel.CommandTunnel.Status] {
        get
      }
      public var rawValue: Swift.Int32 {
        get
      }
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class CommandTunnelOpen : IOTClientSDK.CapabilityTunnel.CommandTunnel {
    public init(ipVersion: IOTClientSDK.CapabilityTunnel.IPVersion, tunnelProtocol: IOTClientSDK.CapabilityTunnel.TunnelProtocol, tunnelType: IOTClientSDK.CapabilityTunnel.TunnelType, transportType: IOTClientSDK.CapabilityTunnel.TunnelTransport, protocolParams: IOTClientSDK.TunnelRTSPParameter, timeoutMs: Swift.UInt32)
    override public init(commandID: IOTClientSDK.CapabilityTunnel.CommandId, timeoutMs: Swift.UInt32)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class CommandTunnelOpenTCP : IOTClientSDK.CapabilityTunnel.CommandTunnelOpen {
    public init(listeningHostName: Swift.String, listeningPort: Swift.UInt16, ipVersion: IOTClientSDK.CapabilityTunnel.IPVersion, tunnelProtocol: IOTClientSDK.CapabilityTunnel.TunnelProtocol = .COCO_STD_TUNNEL_PROTOCOL_RTSP, tunnelType: IOTClientSDK.CapabilityTunnel.TunnelType, timeoutMs: Swift.UInt32)
    override public init(ipVersion: IOTClientSDK.CapabilityTunnel.IPVersion, tunnelProtocol: IOTClientSDK.CapabilityTunnel.TunnelProtocol, tunnelType: IOTClientSDK.CapabilityTunnel.TunnelType, transportType: IOTClientSDK.CapabilityTunnel.TunnelTransport, protocolParams: IOTClientSDK.TunnelRTSPParameter, timeoutMs: Swift.UInt32)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class CommandTunnelOpenUDP : IOTClientSDK.CapabilityTunnel.CommandTunnelOpen {
    public init(fwdHostName: Swift.String, fwdPort: Swift.UInt16, ipVersion: IOTClientSDK.CapabilityTunnel.IPVersion, tunnelProtocol: IOTClientSDK.CapabilityTunnel.TunnelProtocol = .COCO_STD_TUNNEL_PROTOCOL_RTSP, tunnelType: IOTClientSDK.CapabilityTunnel.TunnelType, timeoutMs: Swift.UInt32)
    override public init(ipVersion: IOTClientSDK.CapabilityTunnel.IPVersion, tunnelProtocol: IOTClientSDK.CapabilityTunnel.TunnelProtocol, tunnelType: IOTClientSDK.CapabilityTunnel.TunnelType, transportType: IOTClientSDK.CapabilityTunnel.TunnelTransport, protocolParams: IOTClientSDK.TunnelRTSPParameter, timeoutMs: Swift.UInt32)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class CommandTunnelClose : IOTClientSDK.CapabilityTunnel.CommandTunnel {
    public init(tunnelHandle: Swift.OpaquePointer, timeoutMs: Swift.UInt32)
    public var tunnelHandle: Swift.OpaquePointer? {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityTunnel.CommandId, timeoutMs: Swift.UInt32)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityAirQualitySensing : IOTClientSDK.Capability {
  override public init(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource)
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_AIRQLTY_MIN
    case COCO_STD_ATTR_AIRQLTY_TOTAL_VOC_PPB
    case COCO_STD_ATTR_AIRQLTY_MAX
    case COCO_STD_ATTR_AIRQLTY_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityAirQualitySensing.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityAirQualitySensing.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_AIRQLTY_MIN
    case COCO_STD_CMD_AIRQLTY_MAX
    case COCO_STD_CMD_AIRQLTY_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityAirQualitySensing.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityAirQualitySensing.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IOTClient {
  public static var defaultUserAgent: Swift.String
  public static var timeout: Swift.UInt32
  public static var shared: IOTClientSDK.IOTClient
  public var networkMap: [Swift.String : IOTClientSDK.Network] {
    get
  }
  public var networkStatus: [Swift.String : IOTClientSDK.NetworkDatum] {
    get
  }
  public var devCreator: IOTClientSDK.Creator? {
    get
  }
  public static func setup(cwdPath: Swift.String, appScope: Swift.String, clientId: Swift.String, downloadPath: Swift.String, oauthDelegate: IOTClientSDK.OAuthDelegate, cocoCallbackDelegate: IOTClientSDK.CocoCallbackDelegate, connectivityTimers: IOTClientSDK.ConnectivityTimers?, userAgent: Swift.String = defaultUserAgent, creator: IOTClientSDK.Creator?) throws
  public static func setTokens(response: Swift.String) throws
  public static func getAccessToken(handler: ((Swift.String, IOTClientSDK.StatusCode) -> Swift.Void)?) throws
  public func getSavedCoconets() throws -> [IOTClientSDK.Network]
  public func getAllCoconet(requestContext: Swift.UnsafeMutableRawPointer?) throws
  public func sendInfoResponse(infoResponse: IOTClientSDK.InfoResponse, context: Swift.UnsafeMutableRawPointer?) throws
  public func sendInfoRequest(infoRequest: IOTClientSDK.InfoRequest, context: Swift.UnsafeMutableRawPointer?) throws
  public func getAvailableChannelPort(device: IOTClientSDK.Device, portCount: Swift.UInt16) -> [Swift.UInt16]
  public func invalidateAccessToken() -> Swift.Int32
  public func Save() throws -> Swift.String?
  public func Restore(from data: Swift.String) throws
  @objc deinit
}
public class ConnectivityTimers {
  public init(fastRetryDuration: Swift.UInt32, backgroundMaxRetryPeriod: Swift.UInt32, foregroundMaxRetryPeriod: Swift.UInt32, keepAliveInterval: Swift.UInt32, keepAliveTimeout: Swift.UInt32)
  public var fastRetryDuration: Swift.UInt32 {
    get
  }
  public var backgroundMaxRetryPeriod: Swift.UInt32 {
    get
  }
  public var foregroundMaxRetryPeriod: Swift.UInt32 {
    get
  }
  public var keepAliveInterval: Swift.UInt32 {
    get
  }
  public var keepAliveTimeout: Swift.UInt32 {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityWarning : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_WARNING_MIN
    case COCO_STD_ATTR_WARNING_STATE
    case COCO_STD_ATTR_WARNING_MAX
    case COCO_STD_ATTR_WARNING_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityWarning.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityWarning.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_WARNING_MIN
    case COCO_STD_CMD_WARNING_START
    case COCO_STD_CMD_WARNING_STOP
    case COCO_STD_CMD_WARNING_MAX
    case COCO_STD_CMD_﻿WARNING_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityWarning.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityWarning.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum WarningType : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_WARNING_TYPE_MIN
    case COCO_STD_WARNING_TYPE_BURGLAR
    case COCO_STD_WARNING_TYPE_FIRE
    case COCO_STD_WARNING_TYPE_EMERGENCY
    case COCO_STD_WARNING_TYPE_POLICE_PANIC
    case COCO_STD_WARNING_TYPE_FIRE_PANIC
    case COCO_STD_WARNING_TYPE_EMERGENCY_PANIC
    case COCO_STD_WARNING_TYPE_MAX
    case COCO_STD_WARNING_TYPE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityWarning.WarningType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityWarning.WarningType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class WarningCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(commandID: IOTClientSDK.CapabilityWarning.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class WarningStart : IOTClientSDK.CapabilityWarning.WarningCommand {
    public init(warningType: IOTClientSDK.CapabilityWarning.WarningType)
    public var warning: IOTClientSDK.CapabilityWarning.WarningType? {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityWarning.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class WarningStop : IOTClientSDK.CapabilityWarning.WarningCommand {
    public init()
    public var warning: IOTClientSDK.CapabilityWarning.WarningType? {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityWarning.CommandId)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRespInstallCode : IOTClientSDK.InfoResponseValue {
  public init(installCode: Swift.String)
  public var installCode: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Factory : IOTClientSDK.Creator {
  open func getNetwork(networkId: Swift.String) -> IOTClientSDK.Network
  open func getDevice(deviceNodeId: Swift.UInt32, parent: IOTClientSDK.Network) -> IOTClientSDK.Device
  open func getZone(zoneId: Swift.UInt16, parent: IOTClientSDK.Network) -> IOTClientSDK.Zone
  open func getScene(sceneId: Swift.UInt16, parent: IOTClientSDK.Network) -> IOTClientSDK.Scene
  open func getResource(eui: Swift.String, parentDevice: IOTClientSDK.Device) -> IOTClientSDK.Resource
  open func getCapability(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource) -> IOTClientSDK.Capability
  open func getAttribute(attributeId: Swift.Int32, parent: IOTClientSDK.Capability) -> IOTClientSDK.Attribute
  public static var shared: IOTClientSDK.Factory
  public func createAttribute(attributeId: Swift.Int32, parent: IOTClientSDK.Capability) -> IOTClientSDK.Attribute
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityFluidLevelSensing : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_FLUID_LEVEL_MIN
    case COCO_STD_ATTR_WATER_OVERFLOW_FLAG
    case COCO_STD_ATTR_WATER_LEAK_FLAG
    case COCO_STD_ATTR_FLUID_LEVEL_MAX
    case COCO_STD_ATTR_FLUID_LEVEL_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityFluidLevelSensing.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityFluidLevelSensing.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_FLUID_SENSING_MIN
    case COCO_STD_CMD_FLUID_SENSING_ENABLE
    case COCO_STD_CMD_FLUID_SENSING_DISABLE
    case COCO_STD_CMD_FLUID_SENSING_MAX
    case COCO_STD_CMD_FLUID_LEVEL_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityFluidLevelSensing.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityFluidLevelSensing.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class FluidLevelSensingCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(commandID: IOTClientSDK.CapabilityFluidLevelSensing.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class EnableFluidLevelSensing : IOTClientSDK.CapabilityFluidLevelSensing.FluidLevelSensingCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityFluidLevelSensing.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class DisableFluidLevelSensing : IOTClientSDK.CapabilityFluidLevelSensing.FluidLevelSensingCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityFluidLevelSensing.CommandId)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityColor : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_COLOR_MIN
    case COCO_STD_ATTR_COLOR_RED
    case COCO_STD_ATTR_COLOR_GREEN
    case COCO_STD_ATTR_COLOR_BLUE
    case COCO_STD_ATTR_COLOR_HUE_DEGREES
    case COCO_STD_ATTR_COLOR_SATURATION_PCT
    case COCO_STD_ATTR_COLOR_LUMINANCE_PCT
    case COCO_STD_ATTR_COLOR_TEMP_KELVIN
    case COCO_STD_ATTR_COLOR_COMP_ID_ARR
    case COCO_STD_ATTR_COLOR_COMP_VALUES_ARR
    case COCO_STD_ATTR_COLOR_X
    case COCO_STD_ATTR_COLOR_Y
    case COCO_STD_ATTR_COLOR_MODE
    case COCO_STD_ATTR_COLOR_HSL
    case COCO_STD_ATTR_COLOR_MAX
    case COCO_STD_ATTR_COLOR_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityColor.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityColor.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_COLOR_MIN
    case COCO_STD_CMD_SET_COLOR_RGB
    case COCO_STD_CMD_SET_COLOR_HSL
    case COCO_STD_CMD_SET_COLOR_TEMP
    case COCO_STD_CMD_SET_COLOR_COMPONENTS
    case COCO_STD_CMD_GET_COLOR_RGB
    case COCO_STD_CMD_GET_COLOR_HSL
    case COCO_STD_CMD_GET_COLOR_TEMP
    case COCO_STD_CMD_GET_COLOR_COMPONENTS
    case COCO_STD_CMD_COLOR_MAX
    case COCO_STD_CMD_COLOR_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityColor.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityColor.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class ColorCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(transition: Swift.Bool, transitionTime: Swift.UInt32, commandID: IOTClientSDK.CapabilityColor.CommandId)
    public var transition: Swift.Bool? {
      get
    }
    public var transitionTime: Swift.UInt32? {
      get
    }
    public func getCStructure() -> Swift.UnsafeMutableRawPointer?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SetRGB : IOTClientSDK.CapabilityColor.ColorCommand {
    public init(red: Swift.UInt8, green: Swift.UInt8, blue: Swift.UInt8, transition: Swift.Bool, transitionTime: Swift.UInt32)
    public var red: Swift.UInt8? {
      get
    }
    public var green: Swift.UInt8? {
      get
    }
    public var blue: Swift.UInt8? {
      get
    }
    override public func getCStructure() -> Swift.UnsafeMutableRawPointer?
    override public init(transition: Swift.Bool, transitionTime: Swift.UInt32, commandID: IOTClientSDK.CapabilityColor.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SetHSL : IOTClientSDK.CapabilityColor.ColorCommand {
    public init(hue: Swift.UInt16, saturation: Swift.UInt8, luminance: Swift.UInt8, transition: Swift.Bool, transitionTime: Swift.UInt32)
    public var hue: Swift.UInt16? {
      get
    }
    public var saturation: Swift.UInt8? {
      get
    }
    public var luminance: Swift.UInt8? {
      get
    }
    override public func getCStructure() -> Swift.UnsafeMutableRawPointer
    override public init(transition: Swift.Bool, transitionTime: Swift.UInt32, commandID: IOTClientSDK.CapabilityColor.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SetTemperature : IOTClientSDK.CapabilityColor.ColorCommand {
    public init(temperature: Swift.Int, transition: Swift.Bool, transitionTime: Swift.UInt32)
    public var temperature: Swift.Int? {
      get
    }
    override public func getCStructure() -> Swift.UnsafeMutableRawPointer?
    override public init(transition: Swift.Bool, transitionTime: Swift.UInt32, commandID: IOTClientSDK.CapabilityColor.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SetColorComponent : IOTClientSDK.CapabilityColor.ColorCommand {
    public init(colorComponentIds: [Swift.Int], colorComponentValues: [Swift.Int], transition: Swift.Bool, transitionTime: Swift.UInt32)
    public var colorComponentIds: [Swift.Int] {
      get
    }
    public var colorComponentValues: [Swift.Int] {
      get
    }
    override public func getCStructure() -> Swift.UnsafeMutableRawPointer?
    override public init(transition: Swift.Bool, transitionTime: Swift.UInt32, commandID: IOTClientSDK.CapabilityColor.CommandId)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRespDSK : IOTClientSDK.InfoResponseValue {
  public init(dsk: Swift.String)
  public var dsk: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NetworkDatum {
  public var state: IOTClientSDK.States {
    get
  }
  public var dataReceived: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CustomTimer {
  public func start()
  public func stop()
  @objc deinit
}
open class Resource : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  public init(eui: Swift.String, parentDevice: IOTClientSDK.Device)
  public init(eui: Swift.String, parentZone: IOTClientSDK.Zone, parentDevice: IOTClientSDK.Device)
  open func encode(to encoder: Swift.Encoder) throws
  open func setName(name: Swift.String)
  open func setManufacturer(manufacturer: Swift.String?)
  open func setModel(model: Swift.String?)
  open func setMetadata(metadata: Swift.String?)
  open func setFirmware(firmwareVersion: Swift.String?)
  open func setPowerSource(powerSource: IOTClientSDK.Resource.PowerSource)
  open func setReceiverType(receiverType: IOTClientSDK.Resource.ReceiverType)
  open func setExplorationStatus(explorationStatus: IOTClientSDK.StatusCode)
  open func setOnline(online: Swift.Bool)
  open func setZone(zone: IOTClientSDK.Zone)
  open func setDevice(device: IOTClientSDK.Device)
  open func addToCapabilityMap(capability: IOTClientSDK.Capability)
  open func removeFromCapabilityMap(capabilityID: IOTClientSDK.Capability.CapabilityId)
  public enum PowerSource : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case POWER_SRC_MIN
    case POWER_SRC_UNKNOWN
    case POWER_SRC_MAINS_SINGLE_PHASE
    case POWER_SRC_MAINS_3_PHASE
    case POWER_SRC_MAINS_UNKNOWN_PHASE
    case POWER_SRC_BATTERY
    case POWER_SRC_DC_SOURCE
    case POWER_SRC_EMERGENCY_CONST_POWER
    case POWER_SRC_EMERGENCY_TRANSFER_SWITCH
    case POWER_SRC_MAX
    case POWER_SRC_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.Resource.PowerSource]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.Resource.PowerSource] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum ReceiverType : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case RCVR_TYPE_MIN
    case RCVR_TYPE_RX_ON_WHEN_IDLE
    case RCVR_TYPE_PERIODIC
    case RCVR_TYPE_WHEN_STIMULATED
    case RCVR_TYPE_MAX
    case RCVR_TYPE_UNBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.Resource.ReceiverType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.Resource.ReceiverType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var eui: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var manufacturer: Swift.String? {
    get
  }
  public var model: Swift.String? {
    get
  }
  public var metadata: Swift.String? {
    get
  }
  public var firmware: Swift.String? {
    get
  }
  public var powerSource: IOTClientSDK.Resource.PowerSource? {
    get
  }
  public var receiverType: IOTClientSDK.Resource.ReceiverType? {
    get
  }
  public var parentDevice: IOTClientSDK.Device? {
    get
  }
  public var parentDeviceId: Swift.UInt32 {
    get
  }
  public var parentZone: IOTClientSDK.Zone? {
    get
  }
  public var explorationStatus: IOTClientSDK.StatusCode? {
    get
  }
  public var capabilityMap: [IOTClientSDK.Capability.CapabilityId : IOTClientSDK.Capability] {
    get
  }
  public var isOnline: Swift.Bool? {
    get
  }
  public func getCapabilityMap(index: IOTClientSDK.Capability.CapabilityId) -> IOTClientSDK.Capability?
  public func getIdentifier(metaData _: Swift.String? = nil) -> IOTClientSDK.Identifier
  public func update(name: Swift.String, timeoutMs: Swift.UInt32 = 0, handler: ((IOTClientSDK.DeviceCommandStatus) -> Swift.Void)?) throws -> Swift.Bool
  public func update(metadata: Swift.String, timeoutMs: Swift.UInt32 = 0, handler: ((IOTClientSDK.DeviceCommandStatus) -> Swift.Void)?) throws -> Swift.Bool
  public func assignToTemplate(resTemplate: IOTClientSDK.ResourceTemplate, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  @objc deinit
}
extension Resource : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  open var hashValue: Swift.Int {
    get
  }
}
extension Resource : Swift.Equatable {
  public static func == (lhs: IOTClientSDK.Resource, rhs: IOTClientSDK.Resource) -> Swift.Bool
}
extension Resource {
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ResourceCommand : IOTClientSDK.Command {
    @objc deinit
  }
}
public class AdvertiseResource : Swift.Hashable, Swift.Equatable {
  public init(networkId: Swift.String, deviceNodeId: Swift.UInt32, resourceEui: Swift.String?, resourceName: Swift.String, resourceMetadata: Swift.String?, protocolId: IOTClientSDK.Device.ResourceProtocol)
  public var networkId: Swift.String {
    get
  }
  public var deviceNodeId: Swift.UInt32 {
    get
  }
  public var resourceEui: Swift.String? {
    get
  }
  public var resourceName: Swift.String {
    get
  }
  public var resourceMetadata: Swift.String? {
    get
  }
  public var protocolId: IOTClientSDK.Device.ResourceProtocol {
    get
  }
  public static func == (lhs: IOTClientSDK.AdvertiseResource, rhs: IOTClientSDK.AdvertiseResource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
open class Zone : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  public init(zoneId: Swift.UInt16, parent: IOTClientSDK.Network)
  open func encode(to encoder: Swift.Encoder) throws
  open func setName(name: Swift.String)
  open func setParent(network: IOTClientSDK.Network?)
  open func addToResourceMap(resource: IOTClientSDK.Resource)
  open func removeFromResourceMap(resource: IOTClientSDK.Resource)
  open func clearResources()
  public var parentNetwork: IOTClientSDK.Network? {
    get
  }
  public var zoneId: Swift.UInt16 {
    get
  }
  public var zoneName: Swift.String {
    get
  }
  public var resources: Swift.Set<IOTClientSDK.Resource> {
    get
  }
  public func update(name: Swift.String, timeoutMs: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  public func addResources(resources: [IOTClientSDK.Resource], timeoutMs: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  public func removeResources(resources: [IOTClientSDK.Resource], timeoutMs: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  public func moveResource(destination: IOTClientSDK.Zone, resource: IOTClientSDK.Resource, timeoutMs: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  public func moveResources(destination: IOTClientSDK.Zone, resources: [IOTClientSDK.Resource], timeoutMs: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  @objc deinit
}
extension Zone : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  open var hashValue: Swift.Int {
    get
  }
}
extension Zone : Swift.Equatable {
  public static func == (lhs: IOTClientSDK.Zone, rhs: IOTClientSDK.Zone) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AddResourceValues : IOTClientSDK.Value {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ParingTypeValue : IOTClientSDK.AddResourceValues {
  public init(paringType: IOTClientSDK.ParingTypeValue.PAIRING_TYPE_VALUE)
  public enum PAIRING_TYPE_VALUE : Swift.Int32, Swift.CaseIterable {
    case COCO_STD_PAIRING_TYPE_MIN
    case COCO_STD_PAIRING_TYPE_SMART_CONFIG
    case COCO_STD_PAIRING_TYPE_AP
    case COCO_STD_PAIRING_TYPE_MAX
    case COCO_STD_PAIRING_TYPE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.ParingTypeValue.PAIRING_TYPE_VALUE]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.ParingTypeValue.PAIRING_TYPE_VALUE] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityFireSensing : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_FIRE_SENSING_MIN
    case COCO_STD_ATTR_CO_DETECTED_FLAG
    case COCO_STD_ATTR_COOKING_IND_FLAG
    case COCO_STD_ATTR_SMOKE_DETECTED_FLAG
    case COCO_STD_ATTR_HEAT_DETECTED_FLAG
    case COCO_STD_ATTR_OVERHEAT_DETECTED_FLAG
    case COCO_STD_ATTR_COLD_DETECTED_FLAG
    case COCO_STD_ATTR_FIRE_DETECTED_FLAG
    case COCO_STD_ATTR_FIRE_SENSING_MAX
    case COCO_STD_ATTR_FIRE_SENSING_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityFireSensing.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityFireSensing.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_FIRE_SENSING_MIN
    case COCO_STD_CMD_FIRE_SENSING_ENABLE
    case COCO_STD_CMD_FIRE_SENSING_DISABLE
    case COCO_STD_CMD_FIRE_SENSING_MAX
    case COCO_STD_CMD_FIRE_SENSING_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityFireSensing.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityFireSensing.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class FireSensingCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(commandID: IOTClientSDK.CapabilityFireSensing.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class EnableFireSensing : IOTClientSDK.CapabilityFireSensing.FireSensingCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityFireSensing.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class DisableFireSensing : IOTClientSDK.CapabilityFireSensing.FireSensingCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityFireSensing.CommandId)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoReqAvailListenPort : IOTClientSDK.InfoRequestValue {
  public init(portCount: Swift.UInt8, transportType: IOTClientSDK.CapabilityTunnel.TunnelTransport, consecutivePort: Swift.Bool)
  public var portCount: Swift.UInt8 {
    get
  }
  public var transportType: IOTClientSDK.CapabilityTunnel.TunnelTransport {
    get
  }
  public var consecutivePort: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityWrapper : IOTClientSDK.Capability {
  required public init(from decoder: Swift.Decoder) throws
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  public func getAttributeId(id: Swift.Int32) -> IOTClientSDK.AttributeIDProtocol
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityHVACControl : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case ATTR_HVAC_MIN
    case ATTR_HVAC_SUPPORTED_MODES_ARR
    case ATTR_HVAC_POWER_ON_FLAG
    case ATTR_HVAC_TEMPERATURE_CELSIUS
    case ATTR_HVAC_MODE
    case ATTR_HVAC_FAN_SPEED
    case ATTR_HVAC_SWING_ON_FLAG
    case ATTR_HVAC_MAX
    case ATTR_HVAC_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityHVACControl.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityHVACControl.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case CMD_HVAC_MIN
    case CMD_HVAC_SET_STATE
    case CMD_HVAC_SYNC_STATE
    case CMD_HVAC_MAX
    case CMD_HVAC_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityHVACControl.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityHVACControl.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum HVACMode : Swift.Int32, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case HVAC_MODE_MIN
    case HVAC_MODE_COOL
    case HVAC_MODE_HEAT
    case HVAC_MODE_AUTO
    case HVAC_MODE_EMERGENCY_HEAT
    case HVAC_MODE_PRE_COOLING
    case HVAC_MODE_FAN_ONLY
    case HVAC_MODE_DRY
    case HVAC_MODE_SLEEP
    case HVAC_MODE_MAX
    case HVAC_MODE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityHVACControl.HVACMode]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityHVACControl.HVACMode] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum FanSpeed : Swift.Int32, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case HVAC_FAN_SPEED_MIN
    case HVAC_FAN_SPEED_OFF
    case HVAC_FAN_SPEED_LOW
    case HVAC_FAN_SPEED_MEDIUM
    case HVAC_FAN_SPEED_HIGH
    case HVAC_FAN_SPEED_AUTO
    case HVAC_FAN_SPEED_MAX
    case HVAC_FAN_SPEED_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityHVACControl.FanSpeed]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityHVACControl.FanSpeed] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class CommandHVAC : IOTClientSDK.Resource.ResourceCommand {
    public init(commandId: IOTClientSDK.CapabilityHVACControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SetHVACState : IOTClientSDK.CapabilityHVACControl.CommandHVAC {
    public init(powerOnFlag: Swift.CBool, mode: IOTClientSDK.CapabilityHVACControl.HVACMode, temperatureCelsius: Swift.UInt8, fanSpeed: IOTClientSDK.CapabilityHVACControl.FanSpeed)
    public var powerOnFlag: Swift.CBool {
      get
    }
    public var mode: IOTClientSDK.CapabilityHVACControl.HVACMode {
      get
    }
    public var temperatureCelsius: Swift.UInt8 {
      get
    }
    public var fanSpeed: IOTClientSDK.CapabilityHVACControl.FanSpeed {
      get
    }
    override public init(commandId: IOTClientSDK.CapabilityHVACControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SyncCommand : IOTClientSDK.CapabilityHVACControl.CommandHVAC {
    public init()
    override public init(commandId: IOTClientSDK.CapabilityHVACControl.CommandId)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRespContentSearch : IOTClientSDK.InfoResponseValue {
  public init(totalSearchCount: Swift.UInt64, contentMetaDataArr: [IOTClientSDK.StorageContentMetadata])
  public var totalSearchCount: Swift.UInt64 {
    get
  }
  public var contentMetaDataArr: [IOTClientSDK.StorageContentMetadata] {
    get
  }
  @objc deinit
}
public protocol CommandIDProtocol : Swift.Decodable, Swift.Encodable {
  func getInt() -> Swift.Int32
}
public protocol AttributeIDProtocol : Swift.Decodable, Swift.Encodable {
  func getInt() -> Swift.Int32
}
open class Capability : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  public init(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource)
  open func encode(to encoder: Swift.Encoder) throws
  open func setName(name: Swift.String?)
  open func addToAttributeMap(attribute: IOTClientSDK.Attribute)
  open func removeFromAttributeMap(attributeId: Swift.Int32)
  open func containsAttribute(attributeId: Swift.Int32) -> Swift.Bool
  open func clearAttributeMap()
  open func addTostandardCommandArray(commandId: Swift.Int32)
  open func removeFromStandardCommandArray(commandId: Swift.Int32)
  open func clearStandardCommandArray()
  open func setParent(resource: IOTClientSDK.Resource)
  public enum CapabilityId : Swift.Int32, Swift.Hashable, Swift.CaseIterable, Swift.Codable {
    case COCO_STD_CAP_MIN
    case COCO_STD_CAP_ON_OFF_CONTROL
    case COCO_STD_CAP_LEVEL_CTRL
    case COCO_STD_CAP_COLOR_CTRL
    case COCO_STD_CAP_LOCK_CONTROL
    case COCO_STD_CAP_ENERGY_METERING
    case COCO_STD_CAP_MOTION_SENSING
    case COCO_STD_CAP_OCCUPANCY_SENSING
    case COCO_STD_CAP_CONTACT_SENSING
    case COCO_STD_CAP_FLUID_LEVEL_MEASUREMENT
    case COCO_STD_CAP_FIRE_SENSING
    case COCO_STD_CAP_TEMPERATURE_MEASUREMENT
    case COCO_STD_CAP_ILLUMINANCE_MEASUREMENT
    case COCO_STD_CAP_POWER_LEVEL_MEASUREMENT
    case COCO_STD_CAP_TUNNEL_CONTROL
    case COCO_STD_CAP_REL_HUMIDITY_MEASUREMENT
    case COCO_STD_CAP_KEYPRESS_SENSING
    case COCO_STD_CAP_WARNING_DEV_CONTROL
    case COCO_STD_CAP_NETWORK_CONFIGURATION
    case COCO_STD_CAP_MEDIA_STREAM
    case COCO_STD_CAP_STORAGE_CONFIG
    case COCO_STD_CAP_STORAGE_CONTROL
    case COCO_STD_CAP_MOTOR_CTRL
    case COCO_STD_CAP_IMAGE_CTRL
    case COCO_STD_CAP_SNAPSHOT
    case COCO_STD_CAP_STATIONARY_POSITION
    case COCO_STD_CAP_REAL_TIME_POSITION
    case COCO_STD_CAP_VIBRATION_SENSING
    case COCO_STD_CAP_AIR_QUALITY_SENSING
    case COCO_STD_CAP_WINDOW_COVERING
    case COCO_STD_CAP_REMOTE_CONTROL
    case COCO_STD_CAP_HVAC_CONTROL
    case COCO_STD_CAP_MAX
    case COCO_STD_CAP_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.Capability.CapabilityId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.Capability.CapabilityId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var parentResource: IOTClientSDK.Resource? {
    get
  }
  public var capabilityId: IOTClientSDK.Capability.CapabilityId {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var standardCommandArray: [Swift.Int32] {
    get
  }
  public var attributeMap: [Swift.Int32 : IOTClientSDK.Attribute] {
    get
  }
  public var realCapability: IOTClientSDK.Capability? {
    get
  }
  public func getIdentifier(metaData: Swift.String? = nil) -> IOTClientSDK.Identifier
  public func sendResourceCommand(command: IOTClientSDK.Resource.ResourceCommand, handler: ((IOTClientSDK.CommandStateCB) -> Swift.Void)?, commandContext: Swift.UnsafeMutableRawPointer?) throws -> Any?
  public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InfoRequestValue : IOTClientSDK.Value {
  @objc deinit
}
public enum StatusCode : Swift.Int32, Swift.Codable {
  case COCO_STD_STATUS_CODE_MIN
  case COCO_STD_STATUS_SUCCESS
  case COCO_STD_STATUS_INVALID
  case COCO_STD_STATUS_FAILURE
  case COCO_STD_STATUS_PARTIAL_SUCCESS
  case COCO_STD_STATUS_TIMEOUT
  case COCO_STD_STATUS_REJECTED
  case COCO_STD_STATUS_DEVICE_BUSY
  case COCO_STD_STATUS_IN_PROGRESS
  case COCO_STD_STATUS_AUTH_FAILED
  case COCO_STD_STATUS_RESOURCE_NOT_SUPPORTED
  case COCO_STD_STATUS_SUCCESS_INSECURE
  case COCO_STD_STATUS_PARTIAL_SUCCESS_INSECURE
  case COCO_STD_STATUS_CONNECTIVITY_ERROR
  case COCO_STD_STATUS_CMD_NOT_SUPPORTED
  case COCO_STD_STATUS_TOKEN_NOT_SET
  case COCO_STD_STATUS_TOKEN_REFRESH_FAILED
  case COCO_STD_STATUS_DISCOVERY_NOT_APPLICABLE
  case COCO_STD_STATUS_NETWORK_DISCONNECTED
  case COCO_STD_STATUS_MAX_COUNT_REACHED
  case COCO_STD_STATUS_DEVICE_UNREACHABLE
  case COCO_STD_STATUS_NETWORK_BLOCKED
  case COCO_STD_STATUS_CODE_MAX
  case COCO_STD_STATUS_CODE_UBOUND
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
open class Command : Swift.Codable {
  public init(commandID: Swift.Int32, timeoutMs: Swift.UInt32 = IOTClient.timeout)
  public var commandID: Swift.Int32
  public var timeoutMs: Swift.UInt32
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class CommandStateCB {
  public init(networkId: Swift.String, deviceNodeId: Swift.UInt32, resourceEui: Swift.String, capabilityId: IOTClientSDK.Capability.CapabilityId, commandId: Swift.UInt8?, commandResponse: IOTClientSDK.CommandResponse?)
  open func setState(state: IOTClientSDK.StatusCode?)
  public var networkId: Swift.String {
    get
  }
  public var deviceNodeId: Swift.UInt32 {
    get
  }
  public var resourceEui: Swift.String {
    get
  }
  public var capabilityId: IOTClientSDK.Capability.CapabilityId {
    get
  }
  public var commandId: Swift.UInt8? {
    get
  }
  public var state: IOTClientSDK.StatusCode? {
    get
  }
  public var commandResponse: IOTClientSDK.CommandResponse? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Rule : Swift.Hashable, Swift.Codable {
  open func setName(name: Swift.String?)
  open func setResourceConditions(resourceConditions: [IOTClientSDK.ResourceCondition]?)
  open func setScheduleConditions(scheduleConditions: [IOTClientSDK.ScheduleCondition]?)
  open func setResourceActions(resourceActions: [IOTClientSDK.ResourceAction])
  open func setSceneActions(sceneActions: [IOTClientSDK.SceneAction])
  open func setParent(parent: IOTClientSDK.Network?)
  public var Id: Swift.UInt16 {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var resourceConditions: [IOTClientSDK.ResourceCondition]? {
    get
  }
  public var scheduleConditions: [IOTClientSDK.ScheduleCondition]? {
    get
  }
  public var resourceActions: [IOTClientSDK.ResourceAction]? {
    get
  }
  public var sceneActions: [IOTClientSDK.SceneAction]? {
    get
  }
  public var parent: IOTClientSDK.Network? {
    get
  }
  public static func == (lhs: IOTClientSDK.Rule, rhs: IOTClientSDK.Rule) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func update(name: Swift.String, timeoutMs: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  public func saveRuleSetting(resourceActions: [IOTClientSDK.ResourceAction], scheduleConditions: [IOTClientSDK.ScheduleCondition], resourceConditions: [IOTClientSDK.ResourceCondition], sceneActions: [IOTClientSDK.SceneAction], timeoutMs: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  public func removeResourceActions(resourceActions: [IOTClientSDK.ResourceAction], timeoutMs: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
}
final public class ConnectParams : Swift.Codable {
  public init()
  final public var port: Swift.Int? {
    get
  }
  final public var networkName: Swift.String? {
    get
  }
  final public var networkType: IOTClientSDK.Network.NetworkType? {
    get
  }
  final public var userRole: IOTClientSDK.Network.UserRole? {
    get
  }
  final public var accessType: IOTClientSDK.Network.AccessType? {
    get
  }
  final public func setPort(_ portNumber: Swift.Int)
  final public func setNetworkName(_ name: Swift.String)
  final public func setNetworkType(_ networkType: IOTClientSDK.Network.NetworkType)
  final public func setUserRole(_ userRole: IOTClientSDK.Network.UserRole)
  final public func setAccessType(_ accessType: IOTClientSDK.Network.AccessType)
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityHumiditySensing : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_HUMIDITY_MIN
    case COCO_STD_ATTR_CURRENT_REL_HUMIDITY_PCT
    case COCO_STD_ATTR_HUMIDITY_MAX
    case COCO_STD_ATTR_HUMIDITY_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityHumiditySensing.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityHumiditySensing.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_HUMIDITY_MIN
    case COCO_STD_CMD_FETCH_RELATIVE_HUMIDITY_PCT
    case COCO_STD_CMD_HUMIDITY_MAX
    case COCO_STD_CMD_﻿HUMIDITY_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityHumiditySensing.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityHumiditySensing.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
public class StorageContentMetadata {
  public init(contentId: Swift.UInt64, sourceUri: IOTClientSDK.SourceURI, contentType: Swift.Int32, uploadTriggerType: Swift.Int32, uploadTriggeredUri: IOTClientSDK.UploadTriggerURI, size: Swift.UInt32, staticLink: Swift.String?, userMetaData: Swift.String?, createdTimestamp: Swift.UInt64, contentDuration: Swift.UInt32)
  public var contentId: Swift.UInt64 {
    get
  }
  public var sourceUri: IOTClientSDK.SourceURI {
    get
  }
  public var contentType: IOTClientSDK.InfoReqContentSearch.StorageContentType {
    get
  }
  public var uploadTriggerType: IOTClientSDK.InfoReqContentSearch.UploadTriggerType {
    get
  }
  public var uploadTriggeredUri: IOTClientSDK.UploadTriggerURI {
    get
  }
  public var size: Swift.UInt32 {
    get
  }
  public var staticLink: Swift.String? {
    get
  }
  public var userMetaData: Swift.String? {
    get
  }
  public var createdTimestamp: Swift.UInt64 {
    get
  }
  public var contentDuration: Swift.UInt32 {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityStationaryPosition : IOTClientSDK.Capability {
  override public init(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource)
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_STATIONARY_POSITION_MIN
    case COCO_STD_ATTR_STATIONARY_POSITION_BEACON_LOC
    case COCO_STD_ATTR_STATIONARY_POSITION_DEVICE_LOC
    case COCO_STD_ATTR_STATIONARY_POSITION_MAX
    case COCO_STD_ATTR_STATIONARY_POSITION_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityStationaryPosition.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityStationaryPosition.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_STATIONARY_POSITION_MIN
    case COCO_STD_CMD_STATIONARY_POSITION_SET_DEVICE_LOC
    case COCO_STD_CMD_STATIONARY_POSITION_MAX
    case COCO_STD_CMD_STATIONARY_POSITION_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityStationaryPosition.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityStationaryPosition.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class DeviceLocation : Swift.Codable {
    public var locationId: Swift.String?
    public var lotId: Swift.String?
    public var xCoordinate: Swift.Double?
    public var yCoordinate: Swift.Double?
    public var environmentalFactor: Swift.Double?
    @objc deinit
    public func encode(to encoder: Swift.Encoder) throws
    required public init(from decoder: Swift.Decoder) throws
  }
  @_hasMissingDesignatedInitializers public class BeaconLocation : Swift.Codable {
    public var locationId: Swift.String?
    public var lotId: Swift.String?
    public var xCoordinate: Swift.Double?
    public var yCoordinate: Swift.Double?
    public var beaconId: Swift.String?
    public var deviceResourceName: Swift.String?
    public var avgRadius: Swift.Double?
    public var errorPrecision: Swift.Double?
    public var avgTimeDuration: Swift.Int?
    @objc deinit
    public func encode(to encoder: Swift.Encoder) throws
    required public init(from decoder: Swift.Decoder) throws
  }
  @_hasMissingDesignatedInitializers public class StationaryPositionCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(commandId: IOTClientSDK.CapabilityStationaryPosition.CommandId)
    @objc deinit
  }
  public class SetStationaryPositionCommand : IOTClientSDK.CapabilityStationaryPosition.StationaryPositionCommand {
    public init(locationId: Swift.String, lotId: Swift.String, xCoordinate: Swift.Double, yCoordinate: Swift.Double, environmentalFactor: Swift.Double)
    override public init(commandId: IOTClientSDK.CapabilityStationaryPosition.CommandId)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoReqContentPlayback : IOTClientSDK.InfoRequestValue {
  public init(contentId: Swift.UInt64, streamProtocolType: IOTClientSDK.InfoReqContentPlayback.StreamProtocol)
  public enum StreamProtocol : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_STREAM_PROTOCOL_TYPE_MIN
    case COCO_STD_STREAM_PROTOCOL_TYPE_DASH
    case COCO_STD_STREAM_PROTOCOL_TYPE_HLS
    case COCO_STD_STREAM_PROTOCOL_TYPE_HDS
    case COCO_STD_STREAM_PROTOCOL_TYPE_SMOOTH
    case COCO_STD_STREAM_PROTOCOL_TYPE_MAX
    case COCO_STD_STREAM_PROTOCOL_TYPE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.InfoReqContentPlayback.StreamProtocol]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.InfoReqContentPlayback.StreamProtocol] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var contentId: Swift.UInt64 {
    get
  }
  public var streamProtocolType: IOTClientSDK.InfoReqContentPlayback.StreamProtocol {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityWindowCovering : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_WNDW_COVER_MIN
    case COCO_STD_ATTR_WNDW_COVER_OPEN_PCT
    case COCO_STD_ATTR_WNDW_COVER_MAX
    case COCO_STD_ATTR_WNDW_COVER_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityWindowCovering.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityWindowCovering.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_WNDW_COVER_MIN
    case COCO_STD_CMD_WNDW_COVER_UP
    case COCO_STD_CMD_WNDW_COVER_DOWN
    case COCO_STD_CMD_WNDW_COVER_STOP
    case COCO_STD_CMD_WNDW_COVER_SET_OPEN_PCT
    case COCO_STD_CMD_WNDW_COVER_MAX
    case COCO_STD_CMD_WNDW_COVER_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityWindowCovering.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityWindowCovering.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class WindowCoverCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(commandID: IOTClientSDK.CapabilityWindowCovering.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SetWindowOpenPercentage : IOTClientSDK.CapabilityWindowCovering.WindowCoverCommand {
    public init(openPct: Swift.UInt8)
    public var openPct: Swift.UInt8?
    override public init(commandID: IOTClientSDK.CapabilityWindowCovering.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SetWindowCoverDown : IOTClientSDK.CapabilityWindowCovering.WindowCoverCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityWindowCovering.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SetWindowCoverUp : IOTClientSDK.CapabilityWindowCovering.WindowCoverCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityWindowCovering.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SetWindowCoverStop : IOTClientSDK.CapabilityWindowCovering.WindowCoverCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityWindowCovering.CommandId)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CommandRemoteResp : IOTClientSDK.CommandResponse {
  override public init(commandId: Swift.Int32)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommandSearchModeResp : IOTClientSDK.CommandRemoteResp {
  public init(pairingCodesArr: [Swift.UInt16])
  public var pairingCodesArr: [Swift.UInt16] {
    get
  }
  override public init(commandId: Swift.Int32)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityLevel : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_LEVEL_MIN
    case COCO_STD_ATTR_LEVEL_PCT
    case COCO_STD_ATTR_LEVEL_MAX
    case COCO_STD_ATTR_LEVEL_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityLevel.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityLevel.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_LEVEL_MIN
    case COCO_STD_CMD_SET_LEVEL
    case COCO_STD_CMD_SET_LEVEL_WITH_ON_OFF
    case COCO_STD_CMD_FETCH_LEVEL
    case COCO_STD_CMD_LEVEL_MAX
    case COCO_STD_CMD_LEVEL_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityLevel.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityLevel.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class LevelCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(level: Swift.UInt8, transition: Swift.Bool)
    public var level: Swift.UInt8? {
      get
    }
    public var transition: Swift.Bool? {
      get
    }
    public var transitionTime: Swift.UInt32? {
      get
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class LevelWithOnOffCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(level: Swift.UInt8, transition: Swift.Bool, restoreLevelFlag: Swift.Bool)
    public var level: Swift.UInt8? {
      get
    }
    public var transition: Swift.Bool? {
      get
    }
    public var transitionTime: Swift.UInt32? {
      get
    }
    public var restoreLevelFlag: Swift.Bool? {
      get
    }
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
public protocol CocoCallbackDelegate {
  func ConnectStatusCallback(network: IOTClientSDK.Network?, coconetStatus: IOTClientSDK.Network.State, context: Swift.UnsafeMutableRawPointer?)
  func LeaveCoconetStatusCallback(coconetStatus: IOTClientSDK.StatusCode, context: Swift.UnsafeMutableRawPointer?)
  func ResourceCallback(resource: IOTClientSDK.Resource?, context: Swift.UnsafeMutableRawPointer?)
  func ResourceCapabilityCallback(capability: IOTClientSDK.Capability?, context: Swift.UnsafeMutableRawPointer?)
  func ResourceAttributeCallback(attribute: IOTClientSDK.Attribute?, context: Swift.UnsafeMutableRawPointer?)
  func NetworkListCallback(networkList: [IOTClientSDK.Network], context: Swift.UnsafeMutableRawPointer?)
  func DeviceMgmtCommandStatusCallback(deviceCommandStatus: IOTClientSDK.DeviceCommandStatus?, context: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func InfoRequestCallback(infoRequest: IOTClientSDK.InfoRequest?, context: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func InfoResponseCallback(infoResponse: IOTClientSDK.InfoResponse?, cmdContext: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func InfoResponseStatusCallback(commandState: IOTClientSDK.StatusCode?, context: Swift.UnsafeMutableRawPointer?)
  func InfoRequestStatusCallback(commandState: IOTClientSDK.StatusCode?, context: Swift.UnsafeMutableRawPointer?)
  func MessageCallback(cocoMessage: IOTClientSDK.Message?, context: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func AdvertiseResourceCallback(advertiseResource: IOTClientSDK.AdvertiseResource?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func ResourceAddedCallback(resourceList: [IOTClientSDK.Resource], context: Swift.UnsafeMutableRawPointer?)
  func ResourceRemovedCallback(removedResourceInfo: IOTClientSDK.Resource?, context: Swift.UnsafeMutableRawPointer?)
  func ResourceTunnelCommandCallback(commandTunnel: IOTClientSDK.Tunnel?, context: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func DeviceInfoCallback(device: IOTClientSDK.Device?, context: Swift.UnsafeMutableRawPointer?)
  func NetworkCommandStatusCallback(networkCMDStatus: IOTClientSDK.NetworkCMDStatus?, context: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func FirmwareUpdateCallback(firmwareUpdate: IOTClientSDK.FirmwareUpdate?, context: Swift.UnsafeMutableRawPointer?)
  func ZoneInfoCallback(zone: IOTClientSDK.Zone?, context: Swift.UnsafeMutableRawPointer?)
  func ZoneDeletionCallback(zone: IOTClientSDK.Zone?, context: Swift.UnsafeMutableRawPointer?)
  func SceneInfoCallback(scene: IOTClientSDK.Scene?, context: Swift.UnsafeMutableRawPointer?)
  func SceneDeletionCallback(scene: IOTClientSDK.Scene?, context: Swift.UnsafeMutableRawPointer?)
  func RuleInfoCallback(rule: IOTClientSDK.Rule?, context: Swift.UnsafeMutableRawPointer?)
  func RuleDeletionCallback(rule: IOTClientSDK.Rule?, context: Swift.UnsafeMutableRawPointer?)
  func NodeConnectStatusCallback(network: IOTClientSDK.Network?, nodeId: Swift.UInt32, isOnline: Swift.Bool, nodeType: IOTClientSDK.NodeType?, coconetContext: Swift.UnsafeMutableRawPointer?)
  func NetworkStateChanged(network: IOTClientSDK.Network, state: IOTClientSDK.NetworkDatum)
  func NetworkDataCallback(network: IOTClientSDK.Network, coconetContext: Swift.UnsafeMutableRawPointer?)
  func ResourceCommandStatusCallback(commandStateCB: IOTClientSDK.CommandStateCB?, context: Swift.UnsafeMutableRawPointer?, cocoNetContext: Swift.UnsafeMutableRawPointer?)
  func ContentInfoCallback(metadata: Swift.String, contentTime: Swift.Int32, nodeId: Swift.UInt32, coconetContext: Swift.UnsafeMutableRawPointer?)
  func NetworkMetadataCallback(metadata: Swift.String, coconetContext: Swift.UnsafeMutableRawPointer?)
  func DataCallback(data: Swift.String, nodeId: Swift.UInt32, coconetContext: Swift.UnsafeMutableRawPointer?)
  func StreamStatusCallback(streamStatus: IOTClientSDK.StreamStatus, coconetContext: Swift.UnsafeMutableRawPointer?, streamContext: Swift.UnsafeMutableRawPointer?, channelContext: Swift.UnsafeMutableRawPointer?)
  func StreamReceiveCallback(streamReceivedData: IOTClientSDK.StreamReceivedData, coconetContext: Swift.UnsafeMutableRawPointer?, streamContext: Swift.UnsafeMutableRawPointer?, channelContext: Swift.UnsafeMutableRawPointer?)
}
extension CocoCallbackDelegate {
  public func ConnectStatusCallback(network _: IOTClientSDK.Network?, coconetStatus _: IOTClientSDK.Network.State, context _: Swift.UnsafeMutableRawPointer?)
  public func LeaveCoconetStatusCallback(coconetStatus _: IOTClientSDK.StatusCode, context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceCallback(resource _: IOTClientSDK.Resource?, context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceCapabilityCallback(capability _: IOTClientSDK.Capability?, context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceAttributeCallback(attribute _: IOTClientSDK.Attribute?, context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceCommandStatusCallback(commandStateCB _: IOTClientSDK.CommandStateCB?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func NetworkListCallback(networkList _: [IOTClientSDK.Network], context _: Swift.UnsafeMutableRawPointer?)
  public func DeviceMgmtCommandStatusCallback(deviceCommandStatus _: IOTClientSDK.DeviceCommandStatus?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func InfoRequestCallback(infoRequest _: IOTClientSDK.InfoRequest?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func InfoResponseCallback(infoResponse _: IOTClientSDK.InfoResponse?, cmdContext _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func InfoResponseStatusCallback(commandState _: IOTClientSDK.StatusCode?, context _: Swift.UnsafeMutableRawPointer?)
  public func InfoRequestStatusCallback(commandState _: IOTClientSDK.StatusCode?, context _: Swift.UnsafeMutableRawPointer?)
  public func MessageCallback(cocoMessage _: IOTClientSDK.Message?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func AdvertiseResourceCallback(advertiseResource _: IOTClientSDK.AdvertiseResource?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func ResourceIncludedCallback(resourceList _: [IOTClientSDK.Resource], context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceExcludedCallback(advertiseResource _: IOTClientSDK.AdvertiseResource?, context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceTunnelCallback(commandTunnel _: IOTClientSDK.Tunnel?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func DeviceInfoCallback(device _: IOTClientSDK.Device?, context _: Swift.UnsafeMutableRawPointer?)
  public func NetworkCommandStatusCallback(networkCMDStatus _: IOTClientSDK.NetworkCMDStatus?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func FirmwareUpdateCallback(firmwareUpdate _: IOTClientSDK.FirmwareUpdate?, context _: Swift.UnsafeMutableRawPointer?)
  public func ZoneInfoCallback(zone _: IOTClientSDK.Zone?, context _: Swift.UnsafeMutableRawPointer?)
  public func ZoneDeletionCallback(zone _: IOTClientSDK.Zone?, context _: Swift.UnsafeMutableRawPointer?)
  public func SceneInfoCallback(scene _: IOTClientSDK.Scene?, context _: Swift.UnsafeMutableRawPointer?)
  public func SceneDeletionCallback(scene _: IOTClientSDK.Scene?, context _: Swift.UnsafeMutableRawPointer?)
  public func RuleInfoCallback(rule _: IOTClientSDK.Rule?, context _: Swift.UnsafeMutableRawPointer?)
  public func RuleDeletionCallback(rule _: IOTClientSDK.Rule?, context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceAddedCallback(resourceList _: [IOTClientSDK.Resource], context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceRemovedCallback(removedResourceInfo _: IOTClientSDK.Resource?, context _: Swift.UnsafeMutableRawPointer?)
  public func ResourceTunnelCommandCallback(commandTunnel _: IOTClientSDK.Tunnel?, context _: Swift.UnsafeMutableRawPointer?, cocoNetContext _: Swift.UnsafeMutableRawPointer?)
  public func NodeConnectStatusCallback(network: IOTClientSDK.Network?, nodeId: Swift.UInt32, isOnline: Swift.Bool, nodeType: IOTClientSDK.NodeType?, coconetContext _: Swift.UnsafeMutableRawPointer?)
  public func NetworkStateChanged(network _: IOTClientSDK.Network, state _: IOTClientSDK.NetworkDatum)
  public func NetworkDataCallback(network _: IOTClientSDK.Network, coconetContext _: Swift.UnsafeMutableRawPointer?)
  public func ContentInfoCallback(metadata _: Swift.String, contentTime _: Swift.Int32, nodeId _: Swift.UInt32, coconetContext _: Swift.UnsafeMutableRawPointer?)
  public func NetworkMetadataCallback(metadata _: Swift.String, coconetContext _: Swift.UnsafeMutableRawPointer?)
  public func DataCallback(data _: Swift.String, nodeId _: Swift.UInt32, coconetContext _: Swift.UnsafeMutableRawPointer?)
  public func StreamStatusCallback(streamStatus: IOTClientSDK.StreamStatus, coconetContext _: Swift.UnsafeMutableRawPointer?, streamContext _: Swift.UnsafeMutableRawPointer?, channelContext _: Swift.UnsafeMutableRawPointer?)
  public func StreamReceiveCallback(streamReceivedData: IOTClientSDK.StreamReceivedData, coconetContext _: Swift.UnsafeMutableRawPointer?, streamContext _: Swift.UnsafeMutableRawPointer?, channelContext _: Swift.UnsafeMutableRawPointer?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityPowerLevels : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_POWER_LEVEL_MEASUREMENT_MIN
    case COCO_STD_ATTR_BATTERY_VOLTAGE_MV
    case COCO_STD_ATTR_BATTERY_LEVEL_PCT
    case COCO_STD_ATTR_BATT_VOLT_LOW_FLAG
    case COCO_STD_ATTR_BATT_LEVEL_LOW_FLAG
    case COCO_STD_ATTR_BATT_LEVEL_CRIT_FLAG
    case COCO_STD_ATTR_POWER_LEVEL_MEASUREMENT_MAX
    case COCO_STD_ATTR_POWER_LEVEL_MEASUREMENT_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityPowerLevels.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityPowerLevels.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_POWER_LEVEL_MEASUREMENT_MIN
    case COCO_STD_CMD_FETCH_BATTERY_VOLTAGE_MV
    case COCO_STD_CMD_FETCH_BATTERY_LEVEL_PCT
    case COCO_STD_CMD_POWER_LEVEL_MEASUREMENT_MAX
    case COCO_STD_CMD_POWER_LEVEL_MEASUREMENT_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityPowerLevels.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityPowerLevels.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
public class ScheduleCondition : Swift.Hashable, Swift.Codable {
  public init(id: Swift.UInt16)
  open func setType(type: IOTClientSDK.ScheduleCondition.ScheduleType)
  open func setStartTime(startTime: Darwin.time_t?)
  open func setExpiryTime(expiryTime: Darwin.time_t?)
  open func setParentRule(parentRule: IOTClientSDK.Rule)
  public enum ScheduleType : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_RULE_SCH_TYPE_MIN
    case COCO_STD_SCH_ONETIME
    case COCO_STD_SCH_DAILY
    case COCO_STD_SCH_WEEKLY
    case COCO_STD_SCH_MONTHLY
    case COCO_STD_SCH_YEARLY
    case COCO_STD_RULE_SCH_TYPE_MAX
    case COCO_STD_RULE_SCH_TYPE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.ScheduleCondition.ScheduleType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.ScheduleCondition.ScheduleType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var id: Swift.UInt16 {
    get
  }
  public var type: IOTClientSDK.ScheduleCondition.ScheduleType? {
    get
  }
  public var startTime: Darwin.time_t? {
    get
  }
  public var expiryTime: Darwin.time_t? {
    get
  }
  public var parentRule: IOTClientSDK.Rule? {
    get
  }
  public static func == (lhs: IOTClientSDK.ScheduleCondition, rhs: IOTClientSDK.ScheduleCondition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InfoRespRemotePairCap : IOTClientSDK.InfoResponseValue {
  public init(capabilityId: IOTClientSDK.Capability.CapabilityId, commandIdArray: [IOTClientSDK.CommandIDProtocol], attributeIdArray: [IOTClientSDK.AttributeIDProtocol])
  public var capabilityId: IOTClientSDK.Capability.CapabilityId {
    get
  }
  public var commandIdArray: [IOTClientSDK.CommandIDProtocol] {
    get
  }
  public var attributeIdArray: [IOTClientSDK.AttributeIDProtocol] {
    get
  }
  @objc deinit
}
extension Network {
  @_hasMissingDesignatedInitializers public class NetworkCommand : IOTClientSDK.Command {
    override public init(commandID: Swift.Int32, timeoutMs: Swift.UInt32 = super)
    @objc deinit
  }
}
extension Network {
  @_hasMissingDesignatedInitializers public class AddZoneCommand : IOTClientSDK.Network.NetworkCommand {
    public init(zoneName: Swift.String, timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class UpdateZoneNameCommand : IOTClientSDK.Network.AddZoneCommand {
    public init(zone: IOTClientSDK.Zone, zoneName: Swift.String, timeoutMs: Swift.UInt32 = IOTClient.timeout)
    override public init(zoneName: Swift.String, timeoutMs: Swift.UInt32 = super)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class DeleteZoneCommand : IOTClientSDK.Network.NetworkCommand {
    public init(zones: [IOTClientSDK.Zone], timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ResourceCommand : IOTClientSDK.Network.NetworkCommand {
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class AddResourceCommand : IOTClientSDK.Network.ResourceCommand {
    public init(zone: IOTClientSDK.Zone, resources: [IOTClientSDK.Resource], timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class RemoveResourceCommand : IOTClientSDK.Network.ResourceCommand {
    public init(zone: IOTClientSDK.Zone, resources: [IOTClientSDK.Resource], timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class MoveResourceCommand : IOTClientSDK.Network.ResourceCommand {
    public init(zone: IOTClientSDK.Zone, destination: IOTClientSDK.Zone, resources: [IOTClientSDK.Resource], timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
}
extension Network {
  @_hasMissingDesignatedInitializers public class AddRuleCommand : IOTClientSDK.Network.NetworkCommand {
    public init(ruleName: Swift.String, timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class DeleteRuleCommand : IOTClientSDK.Network.NetworkCommand {
    public init(rules: [IOTClientSDK.Rule], timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class UpdateRuleNameCommand : IOTClientSDK.Network.AddRuleCommand {
    public init(rule: IOTClientSDK.Rule, ruleName: Swift.String, timeoutMs: Swift.UInt32 = IOTClient.timeout)
    override public init(ruleName: Swift.String, timeoutMs: Swift.UInt32 = super)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SaveRuleSettingCommand : IOTClientSDK.Network.NetworkCommand {
    public init(rule: IOTClientSDK.Rule, resourceActions: [IOTClientSDK.ResourceAction], scheduleConditions: [IOTClientSDK.ScheduleCondition], resourceConditions: [IOTClientSDK.ResourceCondition], sceneActions: [IOTClientSDK.SceneAction], timeout: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class RemoveResourceActionsRuleCommand : IOTClientSDK.Network.NetworkCommand {
    public init(rule: IOTClientSDK.Rule, resourceActions: [IOTClientSDK.ResourceAction], timeoutMs: Swift.UInt32)
    @objc deinit
  }
}
extension Network {
  @_hasMissingDesignatedInitializers public class AddSceneCommand : IOTClientSDK.Network.NetworkCommand {
    public init(sceneName: Swift.String, timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class UpdateSceneNameCommand : IOTClientSDK.Network.AddSceneCommand {
    public init(scene: IOTClientSDK.Scene, sceneName: Swift.String, timeoutMs: Swift.UInt32 = IOTClient.timeout)
    override public init(sceneName: Swift.String, timeoutMs: Swift.UInt32 = super)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class UpdateSceneMetadataCommand : IOTClientSDK.Network.NetworkCommand {
    public init(scene: IOTClientSDK.Scene, metadata: Swift.String, timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class DeleteSceneCommand : IOTClientSDK.Network.NetworkCommand {
    public init(scenes: [IOTClientSDK.Scene], timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ResourceActionScene : IOTClientSDK.Network.NetworkCommand {
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class AddResourceActionCommand : IOTClientSDK.Network.ResourceActionScene {
    public init(scene: IOTClientSDK.Scene, resourceActions: [IOTClientSDK.ResourceAction], timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class UpdateResourceActions : IOTClientSDK.Network.ResourceActionScene {
    public init(scene: IOTClientSDK.Scene, resourceActions: [IOTClientSDK.ResourceAction], timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SaveResourceActions : IOTClientSDK.Network.ResourceActionScene {
    public init(scene: IOTClientSDK.Scene, resourceActions: [IOTClientSDK.ResourceAction], timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class RemoveResourceActionsSceneCommand : IOTClientSDK.Network.ResourceActionScene {
    public init(scene: IOTClientSDK.Scene, resourceActions: [IOTClientSDK.ResourceAction], timeoutMs: Swift.UInt32 = IOTClient.timeout)
    @objc deinit
  }
}
extension Network {
  @_hasMissingDesignatedInitializers public class AssignTemplateCommand : IOTClientSDK.Network.NetworkCommand {
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityContactSensing : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_CONTACT_SENSING_MIN
    case COCO_STD_ATTR_CONTACT_1_OPEN_FLAG
    case COCO_STD_ATTR_CONTACT_2_OPEN_FLAG
    case COCO_STD_ATTR_CONTACT_SENSING_MAX
    case COCO_STD_ATTR_CONTACT_SENSING_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityContactSensing.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityContactSensing.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.CaseIterable {
    case COCO_STD_CMD_CONTACT_SENSING_MIN
    case COCO_STD_CMD_CONTACT_SENSING_ENABLE
    case COCO_STD_CMD_CONTACT_SENSING_DISABLE
    case COCO_STD_CMD_CONTACT_SENSING_MAX
    case COCO_STD_CMD_CONTACT_SENSING_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityContactSensing.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityContactSensing.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class ContactSensingCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(commandID: IOTClientSDK.CapabilityContactSensing.CommandId)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InfoRespContentPlayback : IOTClientSDK.InfoResponseValue {
  public init(streamProtocolType: IOTClientSDK.InfoReqContentPlayback.StreamProtocol, contentPlaybackReqError: IOTClientSDK.InfoRespContentPlayback.PlaybackReqError)
  public enum PlaybackReqError : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_MIN
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_NONE
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_TIMEOUT
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_NOT_FOUND
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_PROT_NOT_SUPPORTED
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_INTERNAL
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_MAX
    case COCO_STD_CONTENT_PLAYBACK_REQ_ERROR_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.InfoRespContentPlayback.PlaybackReqError]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.InfoRespContentPlayback.PlaybackReqError] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var streamProtocolType: IOTClientSDK.InfoReqContentPlayback.StreamProtocol {
    get
  }
  public var playbackUrl: Swift.String? {
    get
  }
  public var contentPlaybackReqError: IOTClientSDK.InfoRespContentPlayback.PlaybackReqError {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityOnOff : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_ONOFF_MIN
    case COCO_STD_ATTR_ON_FLAG
    case COCO_STD_ATTR_ONOFF_MAX
    case COCO_STD_ATTR_ON_OFF_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityOnOff.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityOnOff.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case ONOFF_MIN
    case ON
    case OFF
    case TOGGLE
    case FETCH_ON_OFF_STATUS
    case ONOFF_MAX
    case COCO_STD_CMD_ON_OFF_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityOnOff.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityOnOff.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class OnOffCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(commandID: IOTClientSDK.CapabilityOnOff.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class OnCommand : IOTClientSDK.CapabilityOnOff.OnOffCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityOnOff.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class OffCommand : IOTClientSDK.CapabilityOnOff.OnOffCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityOnOff.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ToggleCommand : IOTClientSDK.CapabilityOnOff.OnOffCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityOnOff.CommandId)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
public enum ERROR_NO : Swift.Int32 {
  case COCO_CLIENT_ERROR_MIN
  case COCO_CLIENT_API_SUCCESS
  case COCO_CLIENT_API_FAILURE
  case COCO_CLIENT_API_EINVAL
  case COCO_CLIENT_API_EPERM
  case COCO_CLIENT_API_ETIME
  case COCO_CLIENT_ERROR_MAX
  case COCO_CLIENT_ERROR_UBOUND
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum COCO_ERROR : Swift.Error {
  case COCOInitError
  case COCOConnectError
  case COCOGetNetworkError
  case COCODisconnectNetworkError
  case COCOGetSavedNetwork
  case COCODiscoverResourcesError
  case COCODeviceMgmtError
  case COCOResourceCommandError
  case COCOSetTokenError
  case COCOGetAccessToken
  case COCOInfoResponseError
  case COCOInfoRequestError
  case COCOSavedNetworkError
  case runtimeError(Swift.String)
}
@_inheritsConvenienceInitializers public class CapabilityMotorCtrl : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_MOTOR_MIN
    case COCO_STD_ATTR_MOTOR_PAN_DOF
    case COCO_STD_ATTR_MOTOR_TILT_DOF
    case COCO_STD_ATTR_MOTOR_SPEED_RPM
    case COCO_STD_ATTR_MOTOR_PRESET_POINT_ARR
    case COCO_STD_ATTR_MOTOR_TRACK_PRESET_POINT_ARR
    case COCO_STD_ATTR_MOTOR_TRACK_ACTIVE_FLAG
    case COCO_STD_ATTR_MOTOR_TRACK_REPEAT_COUNT
    case COCO_STD_ATTR_MOTOR_TRACK_DELAY_MS
    case COCO_STD_ATTR_MOTOR_MAX
    case COCO_STD_ATTR_MOTOR_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMotorCtrl.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMotorCtrl.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_MOTOR_MIN
    case COCO_STD_CMD_MOTOR_PAN
    case COCO_STD_CMD_MOTOR_TILT
    case COCO_STD_CMD_MOTOR_SET_PRESET
    case COCO_STD_CMD_MOTOR_CLEAR_PRESET
    case COCO_STD_CMD_MOTOR_GO_TO_PRESET
    case COCO_STD_CMD_MOTOR_START_TRACK
    case COCO_STD_CMD_MOTOR_STOP_TRACK
    case COCO_STD_CMD_MOTOR_MAX
    case COCO_STD_CMD_MOTOR_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMotorCtrl.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMotorCtrl.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum PanDirection : Swift.Int32, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_MOTOR_PAN_DIREC_MIN
    case COCO_STD_MOTOR_PAN_DIREC_LEFT
    case COCO_STD_MOTOR_PAN_DIREC_RIGHT
    case COCO_STD_MOTOR_PAN_DIREC_MAX
    case COCO_STD_MOTOR_PAN_DIREC_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMotorCtrl.PanDirection]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMotorCtrl.PanDirection] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum TiltDirection : Swift.Int32, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_MOTOR_TILT_DIREC_MIN
    case COCO_STD_MOTOR_TILT_DIREC_UP
    case COCO_STD_MOTOR_TILT_DIREC_DOWN
    case COCO_STD_MOTOR_TILT_DIREC_MAX
    case COCO_STD_MOTOR_TILT_DIREC_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMotorCtrl.TiltDirection]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMotorCtrl.TiltDirection] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class CommandMotorCtrl : IOTClientSDK.Resource.ResourceCommand {
    public var degree: Swift.UInt16 {
      get
    }
    public var speed: Swift.Int32 {
      get
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class MotorPan : IOTClientSDK.CapabilityMotorCtrl.CommandMotorCtrl {
    public init(direction: IOTClientSDK.CapabilityMotorCtrl.PanDirection, degree: Swift.UInt16, speed: Swift.Int32)
    public var direction: IOTClientSDK.CapabilityMotorCtrl.PanDirection {
      get
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class MotorTilt : IOTClientSDK.CapabilityMotorCtrl.CommandMotorCtrl {
    public init(direction: IOTClientSDK.CapabilityMotorCtrl.TiltDirection, degree: Swift.UInt16, speed: Swift.Int32)
    public var direction: IOTClientSDK.CapabilityMotorCtrl.TiltDirection {
      get
    }
    @objc deinit
  }
  required public init(from decoder: Swift.Decoder) throws
  override public init(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FirmwareUpdate {
  public var networkId: Swift.String? {
    get
  }
  public var deviceNodeId: Swift.UInt32 {
    get
  }
  public var packetId: Swift.UInt32 {
    get
  }
  public var status: IOTClientSDK.StatusCode {
    get
  }
  public var oldVersion: Swift.String? {
    get
  }
  public var newVersion: Swift.String? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityIlluminance : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_ILLUMINANCE_MIN
    case COCO_STD_ATTR_CURRENT_LUMINANCE_LUX
    case COCO_STD_ATTR_ILLUMINANCE_MAX
    case COCO_STD_ATTR_ILLUMINANCE_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityIlluminance.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityIlluminance.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_ILLUMINANCE_MIN
    case COCO_STD_CMD_ILLUMINANCE_MAX
    case COCO_STD_CMD_ILLUMINANCE_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityIlluminance.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityIlluminance.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers public class CapabilityStorageCofig : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_STORAGE_CONFIG_MIN
    case COCO_STD_ATTR_STORAGE_STORAGE_NODE
    case COCO_STD_ATTR_STORAGE_CONFIG_MAX
    case COCO_STD_ATTR_STORAGE_CONFIG_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityStorageCofig.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityStorageCofig.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_STORAGE_CONFIG_MIN
    case COCO_STD_CMD_STORAGE_CONFIG
    case COCO_STD_CMD_STORAGE_CONFIG_MAX
    case COCO_STD_CMD_STORAGE_CONFIG_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityStorageCofig.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityStorageCofig.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public class ConfigStorageNode : IOTClientSDK.CapabilityStorageCofig.CommandStorageCofig {
    public init(storageNodeId: Swift.UInt32, resourceEui: Swift.String)
    override public init(commandID: IOTClientSDK.CapabilityStorageCofig.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class CommandStorageCofig : IOTClientSDK.Resource.ResourceCommand {
    public init(commandID: IOTClientSDK.CapabilityStorageCofig.CommandId)
    @objc deinit
  }
  required public init(from decoder: Swift.Decoder) throws
  override public init(capabilityId: Swift.Int32, parent: IOTClientSDK.Resource)
  @objc deinit
}
public enum CacheManager {
  public static func addNetworkObject(network: IOTClientSDK.Network)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityRemoteControl : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_REMOTE_MIN
    case COCO_STD_ATTR_REMOTE_SUPP_PROG_MODES_ARR
    case COCO_STD_ATTR_REMOTE_MAX_APPLIANCE_COUNT
    case COCO_STD_ATTR_REMOTE_CATEGORY_ID_ARR
    case COCO_STD_ATTR_REMOTE_APPLIANCE_LIST
    case COCO_STD_ATTR_REMOTE_MAX
    case COCO_STD_ATTR_REMOTE_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityRemoteControl.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityRemoteControl.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_REMOTE_MIN
    case COCO_STD_CMD_REMOTE_TEST_COMMAND
    case COCO_STD_CMD_REMOTE_ADD_APPLIANCE
    case COCO_STD_CMD_REMOTE_SET_APPLIANCE_PAIRING_CODE
    case COCO_STD_CMD_REMOTE_SET_APPLIANCE_NAME
    case COCO_STD_CMD_REMOTE_REMOVE_APPLIANCE
    case COCO_STD_CMD_REMOTE_EXECUTE_COMMAND
    case COCO_STD_CMD_REMOTE_SET_SEARCH_MODE
    case COCO_STD_CMD_REMOTE_ENTER_LEARN_MODE
    case COCO_STD_CMD_REMOTE_CANCEL_LEARN_MODE
    case COCO_STD_CMD_REMOTE_RENAME_BUTTON
    case COCO_STD_CMD_REMOTE_TEST_LEARNED_COMMAND
    case COCO_STD_CMD_REMOTE_SAVE_LEARNED_COMMAND
    case COCO_STD_CMD_REMOTE_EXECUTE_LEARNED_COMMAND
    case COCO_STD_CMD_REMOTE_DELETE_BUTTON
    case COCO_STD_CMD_REMOTE_MAX
    case COCO_STD_CMD_REMOTE_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityRemoteControl.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityRemoteControl.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum Categories : Swift.Int32, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_REMOTE_CATEGORY_MIN
    case COCO_STD_REMOTE_CATEGORY_AIR_CONDITIONER
    case COCO_STD_REMOTE_CATEGORY_TELEVISION
    case COCO_STD_REMOTE_CATEGORY_OTHER
    case COCO_STD_REMOTE_CATEGORY_MAX
    case COCO_STD_REMOTE_CATEGORY_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityRemoteControl.Categories]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityRemoteControl.Categories] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum ProgrammingMode : Swift.Int32, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_REMOTE_PROG_MODE_MIN
    case COCO_STD_REMOTE_PROG_MODE_PRESET_MODE
    case COCO_STD_REMOTE_PROG_MODE_LEARN_MODE
    case COCO_STD_REMOTE_PROG_MODE_SEARCH_MODE
    case COCO_STD_REMOTE_PROG_MODE_MAX
    case COCO_STD_REMOTE_PROG_MODE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityRemoteControl.ProgrammingMode]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityRemoteControl.ProgrammingMode] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class RemoteCtrlCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class RemoteTestCommand : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init(categoryId: IOTClientSDK.CapabilityRemoteControl.Categories, brandId: Swift.UInt8, pairingCode: Swift.UInt16, capabilityId: IOTClientSDK.Capability.CapabilityId, commandId: Swift.Int32, commandParamValues: Any?)
    public var categoryId: IOTClientSDK.CapabilityRemoteControl.Categories {
      get
    }
    public var brandId: Swift.UInt8 {
      get
    }
    public var pairingCode: Swift.UInt16 {
      get
    }
    public var capabilityId: IOTClientSDK.Capability.CapabilityId {
      get
    }
    public var _commandId: Swift.Int32 {
      get
    }
    public var commandParamValues: Any? {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class AddApplianceCommand : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init(applianceName: Swift.String, categoryId: IOTClientSDK.CapabilityRemoteControl.Categories, programmingMode: IOTClientSDK.CapabilityRemoteControl.ProgrammingMode, brandId: Swift.UInt8, pairingCode: Swift.UInt16)
    public var applianceName: Swift.String {
      get
    }
    public var categoryId: IOTClientSDK.CapabilityRemoteControl.Categories {
      get
    }
    public var programmingMode: IOTClientSDK.CapabilityRemoteControl.ProgrammingMode {
      get
    }
    public var brandId: Swift.UInt8 {
      get
    }
    public var pairingCode: Swift.UInt16 {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SetAppliancePairingCode : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init(applianceId: Swift.String, brandId: Swift.UInt8, pairingCode: Swift.UInt16)
    public var applianceId: Swift.String {
      get
    }
    public var brandId: Swift.UInt8 {
      get
    }
    public var pairingCode: Swift.UInt16 {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SetApplianceName : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init(applianceId: Swift.String, applianceName: Swift.String)
    public var applianceId: Swift.String {
      get
    }
    public var applianceName: Swift.String {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class RemoveAppliance : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init(applianceId: Swift.String)
    public var applianceId: Swift.String {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class RemoteExecuteCommand : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init(applianceId: Swift.String, capabilityId: IOTClientSDK.Capability.CapabilityId, commandId: Swift.Int32, commandParamValues: Any? = nil)
    public var applianceId: Swift.String {
      get
    }
    public var capabilityId: IOTClientSDK.Capability.CapabilityId {
      get
    }
    public var _commandId: Swift.Int32 {
      get
    }
    public var commandParamValues: Any? {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SetSearchMode : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SaveLearnedMode : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class TestLearnedMode : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class EnterLearnMode : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init(applianceId: Swift.String, buttonName: Swift.String)
    public var applianceId: Swift.String {
      get
    }
    public var buttonName: Swift.String {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class CancelLearnMode : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class RenameButton : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init(applianceId: Swift.String, buttonName: Swift.String, buttonId: Swift.UInt8)
    public var applianceId: Swift.String {
      get
    }
    public var buttonName: Swift.String {
      get
    }
    public var buttonId: Swift.UInt8 {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class RemoteExecuteLearnedCommand : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init(applianceId: Swift.String, buttonId: Swift.UInt8)
    public var applianceId: Swift.String {
      get
    }
    public var buttonId: Swift.UInt8 {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class DeleteButtonCommand : IOTClientSDK.CapabilityRemoteControl.RemoteCtrlCommand {
    public init(applianceId: Swift.String, buttonId: Swift.UInt8)
    public var applianceId: Swift.String {
      get
    }
    public var buttonId: Swift.UInt8 {
      get
    }
    override public init(commandID: IOTClientSDK.CapabilityRemoteControl.CommandId)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
public protocol OAuthDelegate {
  func OAuthCallback(authorizationEndpoint: Swift.String, tokenEndpoint: Swift.String)
  func RefreshTokenCB(status: IOTClientSDK.StatusCode)
}
public class ResourceCondition : Swift.Hashable, Swift.Codable {
  public init(ruleResCondId: Swift.UInt16)
  open func setIdentifier(networkId: Swift.String, nodeId: Swift.UInt32, resourceEUI: Swift.String, capabilityId: IOTClientSDK.Capability.CapabilityId, attributeId: Swift.Int32)
  open func setDataType(dataType: IOTClientSDK.Attribute.DataTypeValue)
  open func setOperatorId(operatorType: IOTClientSDK.ResourceCondition.OperatorType)
  open func setRuleValue(ruleValue: Any)
  open func setCondDurationMs(condDurationMs: Swift.UInt32)
  public enum OperatorType : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_OPERATOR_MIN
    case COCO_STD_OPERATOR_EQUAL_TO
    case COCO_STD_OPERATOR_NOT_EQUAL_TO
    case COCO_STD_OPERATOR_GRTR_THAN
    case COCO_STD_OPERATOR_GRTR_THAN_EQUAL_TO
    case COCO_STD_OPERATOR_LESS_THAN
    case COCO_STD_OPERATOR_LESS_THAN_EQUAL_TO
    case COCO_STD_OPERATOR_MAX
    case COCO_STD_OPERATOR_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.ResourceCondition.OperatorType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.ResourceCondition.OperatorType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var ruleResCondId: Swift.UInt16 {
    get
  }
  public var identifier: IOTClientSDK.Identifier? {
    get
  }
  public var operatorType: IOTClientSDK.ResourceCondition.OperatorType? {
    get
  }
  public var ruleValue: Any? {
    get
  }
  public var condDurationMs: Swift.UInt32? {
    get
  }
  public var dataType: IOTClientSDK.Attribute.DataTypeValue? {
    get
  }
  public static func == (lhs: IOTClientSDK.ResourceCondition, rhs: IOTClientSDK.ResourceCondition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CapabilityMotionSensing : IOTClientSDK.Capability {
  public enum AttributeId : Swift.Int32, IOTClientSDK.AttributeIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_ATTR_MOTION_MIN
    case COCO_STD_ATTR_MOTION_DETECTED_FLAG
    case COCO_STD_ATTR_MOTION_SENSING_ENABLED
    case COCO_STD_ATTR_MOTION_IMAGE_WIDTH
    case COCO_STD_ATTR_MOTION_IMAGE_HEIGHT
    case COCO_STD_ATTR_MOTION_ROI_WIDTH
    case COCO_STD_ATTR_MOTION_ROI_HEIGHT
    case COCO_STD_ATTR_MOTION_ROI_INDICES_COUNT
    case COCO_STD_ATTR_MOTION_ROI_INDICES_ARR
    case COCO_STD_ATTR_MOTION_SENSITIVITY_PCT
    case COCO_STD_ATTR_MOTION_MAX
    case COCO_STD_ATTR_MOTION_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMotionSensing.AttributeId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMotionSensing.AttributeId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum CommandId : Swift.Int32, IOTClientSDK.CommandIDProtocol, Swift.Hashable, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_CMD_MOTION_MIN
    case COCO_STD_CMD_MOTION_SENSING_ENABLE
    case COCO_STD_CMD_MOTION_SENSING_DISABLE
    case COCO_STD_CMD_MOTION_SENSING_SET_ROI
    case COCO_STD_CMD_MOTION_SENSING_REMOVE_ROI
    case COCO_STD_CMD_MOTION_SENSING_REMOVE_ALL_ROI
    case COCO_STD_CMD_MOTION_SENSING_SET_SENSITIVITY
    case COCO_STD_CMD_MOTION_MAX
    case COCO_STD_CMD_MOTION_UBOUND
    public func getInt() -> Swift.Int32
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.CapabilityMotionSensing.CommandId]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.CapabilityMotionSensing.CommandId] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  @_hasMissingDesignatedInitializers public class MotionSensingCommand : IOTClientSDK.Resource.ResourceCommand {
    public init(commandID: IOTClientSDK.CapabilityMotionSensing.CommandId)
    @objc deinit
  }
  public class EnableMotionSensing : IOTClientSDK.CapabilityMotionSensing.MotionSensingCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityMotionSensing.CommandId)
    @objc deinit
  }
  public class DisableMotionSensing : IOTClientSDK.CapabilityMotionSensing.MotionSensingCommand {
    public init()
    override public init(commandID: IOTClientSDK.CapabilityMotionSensing.CommandId)
    @objc deinit
  }
  public class SetMotionSensitivityCommand : IOTClientSDK.CapabilityMotionSensing.MotionSensingCommand {
    public init(sensitivityPct: Swift.UInt8)
    override public init(commandID: IOTClientSDK.CapabilityMotionSensing.CommandId)
    @objc deinit
  }
  override public func supports(commandId: IOTClientSDK.CommandIDProtocol?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ResourceAction : Swift.Codable {
  public init(capability: IOTClientSDK.Capability?, command: IOTClientSDK.Resource.ResourceCommand?)
  open func setIdentifier(networkId: Swift.String, nodeId: Swift.UInt32, resourceEUI: Swift.String, capabilityId: IOTClientSDK.Capability.CapabilityId)
  open func setCommand(command: IOTClientSDK.Resource.ResourceCommand)
  public var id: Swift.UInt16 {
    get
  }
  public var identifier: IOTClientSDK.Identifier? {
    get
  }
  public var command: IOTClientSDK.Resource.ResourceCommand? {
    get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InfoReqSearch : IOTClientSDK.InfoRequestValue {
  public init(reqSearchCount: Swift.UInt8, offsetIndex: Swift.UInt32, searchType: IOTClientSDK.InfoReqSearch.SearchType, searchCriteria: Any, sourceUri: IOTClientSDK.SourceURI?, sortByType: IOTClientSDK.InfoReqSearch.SortByType, sortByOrder: IOTClientSDK.InfoReqSearch.SortByOrder)
  public enum SortByType : Swift.Int32, Swift.CaseIterable {
    case COCO_STD_CONTENT_SORT_BY_TYPE_MIN
    case COCO_STD_CONTENT_SORT_BY_TYPE_NONE
    case COCO_STD_CONTENT_SORT_BY_TYPE_CREATED_TIME
    case COCO_STD_CONTENT_SORT_BY_TYPE_MAX
    case COCO_STD_CONTENT_SORT_BY_TYPE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.InfoReqSearch.SortByType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.InfoReqSearch.SortByType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum SortByOrder : Swift.Int32, Swift.CaseIterable {
    case COCO_STD_CONTENT_SORT_BY_ORDER_MIN
    case COCO_STD_CONTENT_SORT_BY_ORDER_NONE
    case COCO_STD_CONTENT_SORT_BY_ORDER_ASCENDING
    case COCO_STD_CONTENT_SORT_BY_ORDER_DESCENDING
    case COCO_STD_CONTENT_SORT_BY_ORDER_MAX
    case COCO_STD_CONTENT_SORT_BY_ORDER_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.InfoReqSearch.SortByOrder]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.InfoReqSearch.SortByOrder] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum SearchType : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_STD_SEARCH_TYPE_MIN
    case COCO_STD_SEARCH_TYPE_BRAND
    case COCO_STD_SEARCH_TYPE_MAX
    case COCO_STD_SEARCH_TYPE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.InfoReqSearch.SearchType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.InfoReqSearch.SearchType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var reqSearchCount: Swift.UInt8 {
    get
  }
  public var offsetIndex: Swift.UInt32 {
    get
  }
  public var searchType: IOTClientSDK.InfoReqSearch.SearchType {
    get
  }
  public var searchCriteria: Any {
    get
  }
  public var sourceUri: IOTClientSDK.SourceURI? {
    get
  }
  public var sortByType: IOTClientSDK.InfoReqSearch.SortByType {
    get
  }
  public var sortByOrder: IOTClientSDK.InfoReqSearch.SortByOrder {
    get
  }
  @objc deinit
}
public class SearchCriteriaBrand {
  public init(categoryId: Swift.UInt32, brandSearchString: Swift.String)
  public var categoryId: Swift.UInt32 {
    get
  }
  public var brandSearchString: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Value {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Identifier : Swift.Codable, Swift.Equatable, Swift.Hashable {
  public enum IdentifierType : Swift.Int32, Swift.Hashable, Swift.Codable {
    case DEVICE
    case RESOURCE
    case CAPABILITY
    case ATTRIBUTE
    case APPLIANCE
    case SOURCE_URI
    case STREAM
    case OTHER
    case UPLOAD_TRIGGER_TYPE
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public var networkId: Swift.String {
    get
  }
  public var nodeId: Swift.UInt32 {
    get
  }
  public var resourceEUI: Swift.String? {
    get
  }
  public var capabilityId: IOTClientSDK.Capability.CapabilityId {
    get
  }
  public var attributeId: Swift.Int32 {
    get
  }
  public var metaData: Swift.String?
  public var identifierType: IOTClientSDK.Identifier.IdentifierType
  public static func == (lhs: IOTClientSDK.Identifier, rhs: IOTClientSDK.Identifier) -> Swift.Bool
  public static func getIdentifier(attribute: IOTClientSDK.Attribute, metaData: Swift.String? = nil) -> IOTClientSDK.Identifier
  public static func getIdentifier(resource: IOTClientSDK.Resource, metaData: Swift.String? = nil) -> IOTClientSDK.Identifier
  public static func getIdentifier(capability: IOTClientSDK.Capability, metaData: Swift.String? = nil) -> IOTClientSDK.Identifier
  public static func getIdentifier(device: IOTClientSDK.Device, metaData: Swift.String? = nil) -> IOTClientSDK.Identifier
  public func hash(into hasher: inout Swift.Hasher)
  public func getObjectOfResource() -> IOTClientSDK.Resource?
  public func getObjectOfCapability() -> IOTClientSDK.Capability?
  public func getObjectOfAttribute() -> IOTClientSDK.Attribute?
  public func getObject(identifierType: IOTClientSDK.Identifier.IdentifierType) -> Any?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class UploadTriggerURI : IOTClientSDK.Identifier {
  public init(networkId: Swift.String, nodeId: Swift.UInt32?, resourceEUI: Swift.String?, capabilityId: IOTClientSDK.Capability.CapabilityId, attributeId: Swift.Int32, sceneId: Swift.UInt16?, ruleId: Swift.UInt16?)
  public var sceneId: Swift.UInt16? {
    get
  }
  public var ruleId: Swift.UInt16? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SourceURI : IOTClientSDK.Identifier {
  public init(networkId: Swift.String, nodeId: Swift.UInt32?, resourceEUI: Swift.String?, capabilityId: IOTClientSDK.Capability.CapabilityId, attributeId: Swift.Int32)
  @objc deinit
}
open class Scene : Swift.Hashable, Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  public init(sceneId: Swift.UInt16, parent: IOTClientSDK.Network?)
  open func encode(to encoder: Swift.Encoder) throws
  open func setName(name: Swift.String)
  open func setMetadata(metadata: Swift.String?)
  open func addToActionMap(resourceAction: IOTClientSDK.ResourceAction)
  open func removeFromActionMap(resourceActionIndex: Swift.Int)
  open func clearActionMap()
  open func setParent(network: IOTClientSDK.Network?)
  public var parentNetwork: IOTClientSDK.Network? {
    get
  }
  public var sceneId: Swift.UInt16 {
    get
  }
  public var sceneName: Swift.String {
    get
  }
  public var metadata: Swift.String? {
    get
  }
  public var actionMap: [Swift.Int : IOTClientSDK.ResourceAction] {
    get
  }
  public static func == (lhs: IOTClientSDK.Scene, rhs: IOTClientSDK.Scene) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func update(name: Swift.String, timeout: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  public func update(metadata: Swift.String, timeout: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  public func execute(commandContext: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  public func addResourceActions(resourceActions: [IOTClientSDK.ResourceAction], timeoutMs: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  public func updateResourceActions(resourceActions: [IOTClientSDK.ResourceAction], timeout: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  public func saveResourceActions(resourceActions: [IOTClientSDK.ResourceAction], timeoutMs: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  public func removeResourceActions(resourceActions: [IOTClientSDK.ResourceAction], timeoutMs: Swift.UInt32 = IOTClient.timeout, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?) throws -> Swift.Bool
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
public protocol SnapshotDelegate : AnyObject {
  func SnapshotStatusCB(filePath: Swift.String?, status: IOTClientSDK.CapabilitySnapshot.SnapShotStatus, coconetContext: Swift.UnsafeMutableRawPointer?, snapshotContext: Swift.UnsafeMutableRawPointer?)
}
@_hasMissingDesignatedInitializers public class InfoReqRemotePairCap : IOTClientSDK.InfoRequestValue {
  public init(pairingCode: Swift.UInt16, resourceEui: Swift.String)
  public var pairingCode: Swift.UInt16 {
    get
  }
  public var resourceEui: Swift.String {
    get
  }
  @objc deinit
}
public enum NodeType : Swift.Int32, Swift.Codable {
  case COCO_STD_NODE_TYPE_MIN
  case COCO_STD_NODE_TYPE_NETWORK
  case COCO_STD_NODE_TYPE_DEVICE
  case COCO_STD_NODE_TYPE_CLIENT
  case COCO_STD_NODE_TYPE_MAX
  case COCO_STD_NODE_TYPE_UBOUND
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
open class Network : Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  public init(id: Swift.String)
  open func encode(to encoder: Swift.Encoder) throws
  open func setName(name: Swift.String)
  open func setUserRole(userRole: IOTClientSDK.Network.UserRole)
  open func setAccessType(accessType: IOTClientSDK.Network.AccessType)
  open func setState(state: IOTClientSDK.Network.State)
  open func addToDeviceMap(device: IOTClientSDK.Device)
  open func setDeviceMap(deviceMap: [Swift.UInt32 : IOTClientSDK.Device])
  open func removeFromDeviceMap(deviceNodeId: Swift.UInt32)
  open func clearDeviceMap()
  open func containsDevice(deviceNodeId: Swift.UInt32) -> Swift.Bool
  open func addToZoneMap(zone: IOTClientSDK.Zone)
  open func removeFromZoneMap(zoneId: Swift.UInt16)
  open func clearZoneMap()
  open func containsZone(zoneId: Swift.UInt16) -> Swift.Bool
  open func addToSceneMap(scene: IOTClientSDK.Scene)
  open func removeFromSceneMap(sceneId: Swift.UInt16)
  open func addToRuleMap(rule: IOTClientSDK.Rule)
  open func setIsBlocked(isBlocked: Swift.Bool)
  open func removeFromRuleMap(ruleId: Swift.UInt16)
  open func setSceneMap(sceneMap: [Swift.UInt16 : IOTClientSDK.Scene])
  open func clearSceneMap()
  open func containsScene(sceneId: Swift.UInt16) -> Swift.Bool
  public enum State : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_CLIENT_COCONET_STATE_MIN
    case COCO_CLIENT_CONNECTED
    case COCO_CLIENT_CONNECTING
    case COCO_CLIENT_CONNECT_ERROR
    case COCO_CLIENT_COCONET_RESET
    case COCO_CLIENT_DISCONNECTED
    case COCO_CLIENT_COCONET_BLOCKED
    case COCO_CLIENT_COCONET_STATE_MAX
    case COCO_CLIENT_COCONET_STATE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.Network.State]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.Network.State] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum UserRole : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case USER_ROLE_MIN
    case USER_ROLE_OWNER
    case USER_ROLE_ADMIN
    case USER_ROLE_GUEST
    case USER_ROLE_MAX
    case USER_ROLE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.Network.UserRole]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.Network.UserRole] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum AccessType : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case ACCESS_TYPE_MIN
    case ACCESS_TYPE_LOCAL
    case ACCESS_TYPE_REMOTE
    case ACCESS_TYPE_MAX
    case ACCESS_TYPE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.Network.AccessType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.Network.AccessType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public enum NetworkType : Swift.Int32, Swift.Codable, Swift.CaseIterable {
    case COCO_CLIENT_COCONET_TYPE_MIN
    case COCO_CLIENT_COCONET_TYPE_IOT
    case COCO_CLIENT_COCONET_TYPE_CALL_NET
    case COCO_CLIENT_COCONET_TYPE_MAX
    case COCO_CLIENT_COCONET_TYPE_UBOUND
    public init?(rawValue: Swift.Int32)
    public typealias AllCases = [IOTClientSDK.Network.NetworkType]
    public typealias RawValue = Swift.Int32
    public static var allCases: [IOTClientSDK.Network.NetworkType] {
      get
    }
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public static var DEFAULT_ZONE_ID: Swift.UInt16
  public static var DEFAULT_ZONE_NAME: Swift.String
  public var id: Swift.String {
    get
  }
  public var state: IOTClientSDK.Network.State {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var port: Swift.Int {
    get
  }
  public var userRole: IOTClientSDK.Network.UserRole? {
    get
  }
  public var accessType: IOTClientSDK.Network.AccessType? {
    get
  }
  public var networkType: IOTClientSDK.Network.NetworkType? {
    get
  }
  public var deviceMap: [Swift.UInt32 : IOTClientSDK.Device] {
    get
  }
  public var sceneMap: [Swift.UInt16 : IOTClientSDK.Scene] {
    get
  }
  public var zoneMap: [Swift.UInt16 : IOTClientSDK.Zone] {
    get
  }
  public var ruleMap: [Swift.UInt16 : IOTClientSDK.Rule] {
    get
  }
  public var resourceTemplates: [Swift.String : IOTClientSDK.ResourceTemplate] {
    get
  }
  public var isBlocked: Swift.Bool {
    get
  }
  public static func connect(with parameter: IOTClientSDK.ConnectParams, networkId: Swift.String, nodeId: Swift.UInt32, inviteURL: Swift.String) -> Swift.Bool
  public func connect(_ parameter: IOTClientSDK.ConnectParams = ConnectParams()) throws -> Swift.Int32
  public func disconnect() throws
  public func leave(context: Swift.UnsafeMutableRawPointer?) throws
  public func forget() throws
  public func sendContentInfo(with metadata: Swift.String?, contentTime: Swift.Int32, nodeIds: [Swift.UInt32]) throws -> Swift.Bool
  public func sendData(with data: Swift.String?, nodeIds: [Swift.UInt32]) throws -> Swift.Bool
  public func sendNetworkCommand(command: IOTClientSDK.Network.NetworkCommand, handler: ((IOTClientSDK.NetworkCMDStatus) -> Swift.Void)?, context: Swift.UnsafeMutableRawPointer?) throws -> Swift.Bool
  @objc deinit
}
extension Network : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  open var hashValue: Swift.Int {
    get
  }
}
extension Network : Swift.Equatable {
  public static func == (lhs: IOTClientSDK.Network, rhs: IOTClientSDK.Network) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class NetworkCMDStatus {
  public var networkId: Swift.String {
    get
  }
  public var cmdSenderNodeId: Swift.UInt32 {
    get
  }
  public var statusCode: IOTClientSDK.StatusCode {
    get
  }
  public var error: IOTClientSDK.COCOError? {
    get
  }
  @objc deinit
}
